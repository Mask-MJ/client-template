/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/auth/authentication/sign-up': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 注册 */
    post: operations['AuthenticationController_signUp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/authentication/sign-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 登录 */
    post: operations['AuthenticationController_signIn']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/authentication/refresh-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 刷新令牌 */
    post: operations['AuthenticationController_refreshTokens']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取工厂列表 */
    get: operations['FactoryController_findAll']
    put?: never
    /** 创建工厂 */
    post: operations['FactoryController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory/import': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 导入阀门数据 */
    post: operations['FactoryController_importValveData']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory/report': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 生成工厂中所有阀门报告 */
    post: operations['FactoryController_generateReport']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory/chart/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取工厂工作台详情 */
    get: operations['FactoryController_findChartData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory/removeAll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** 删除所有工厂 */
    delete: operations['FactoryController_removeAll']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/factory/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取单个工厂 */
    get: operations['FactoryController_findOne']
    put?: never
    post?: never
    /** 删除工厂 */
    delete: operations['FactoryController_remove']
    options?: never
    head?: never
    /** 更新工厂 */
    patch: operations['FactoryController_update']
    trace?: never
  }
  '/api/project/unit': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取装置列表 */
    get: operations['UnitController_findAll']
    put?: never
    /** 创建装置 */
    post: operations['UnitController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/unit/removeAll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** 全部删除 */
    delete: operations['UnitController_removeAll']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/unit/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取装置信息 */
    get: operations['UnitController_findOne']
    put?: never
    post?: never
    /** 删除装置 */
    delete: operations['UnitController_remove']
    options?: never
    head?: never
    /** 更新装置 */
    patch: operations['UnitController_update']
    trace?: never
  }
  '/api/project/valve': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门列表 */
    get: operations['ValveController_findAll']
    put?: never
    /** 创建阀门 */
    post: operations['ValveController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/export': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 导出阀门列表 */
    get: operations['ValveController_exportValveList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/history-data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门运行数据列表 */
    get: operations['ValveController_findHistoryDataList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/history-data/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门运行数据详情 */
    get: operations['ValveController_findHistoryData']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/score': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门评分列表 */
    get: operations['ValveController_findScoreList']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/score/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门评分详情 */
    get: operations['ValveController_findScore']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/removeAll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** 删除所有阀门 */
    delete: operations['ValveController_removeAll']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/valve/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取阀门信息 */
    get: operations['ValveController_findOne']
    put?: never
    post?: never
    /** 删除阀门 */
    delete: operations['ValveController_remove']
    options?: never
    head?: never
    /** 更新阀门信息 */
    patch: operations['ValveController_update']
    trace?: never
  }
  '/api/project/analysis-task': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取分析任务列表 */
    get: operations['AnalysisTaskController_findAll']
    put?: never
    /** 创建分析任务 */
    post: operations['AnalysisTaskController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/analysis-task/execute/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 执行分析任务 */
    post: operations['AnalysisTaskController_execute']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/analysis-task/uploadPdf/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 上传PDF文件 */
    post: operations['AnalysisTaskController_upload']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/analysis-task/result/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取分析任务结果 */
    get: operations['AnalysisTaskController_result']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/analysis-task/removeAll': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /** 删除所有分析任务 */
    delete: operations['AnalysisTaskController_removeAll']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/project/analysis-task/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取分析任务详情 */
    get: operations['AnalysisTaskController_findOne']
    put?: never
    post?: never
    /** 删除分析任务 */
    delete: operations['AnalysisTaskController_remove']
    options?: never
    head?: never
    /** 获取分析任务详情 */
    patch: operations['AnalysisTaskController_update']
    trace?: never
  }
  '/api/system/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取用户列表 */
    get: operations['UserController_findAll']
    put?: never
    /** 创建用户 */
    post: operations['UserController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取当前登录用户信息 */
    get: operations['UserController_findSelf']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取当前登录用户权限码 */
    get: operations['UserController_findSelfCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/changePassword': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 修改密码 */
    patch: operations['UserController_changePassword']
    trace?: never
  }
  '/api/system/user/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取单个用户信息 */
    get: operations['UserController_findOne']
    put?: never
    post?: never
    /** 删除用户 */
    delete: operations['UserController_remove']
    options?: never
    head?: never
    /** 更新用户 */
    patch: operations['UserController_update']
    trace?: never
  }
  '/api/system/dept': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取部门列表 */
    get: operations['DeptController_findAll']
    put?: never
    /** 创建部门 */
    post: operations['DeptController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dept/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取部门详情 */
    get: operations['DeptController_findOne']
    put?: never
    post?: never
    /** 删除部门 */
    delete: operations['DeptController_remove']
    options?: never
    head?: never
    /** 更新部门 */
    patch: operations['DeptController_update']
    trace?: never
  }
  '/api/system/dict': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典列表 */
    get: operations['DictController_findAll']
    put?: never
    /** 创建字典 */
    post: operations['DictController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dict/data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典数据列表 */
    get: operations['DictController_findAllData']
    put?: never
    /** 创建字典数据 */
    post: operations['DictController_createData']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dict/data/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典数据详情 */
    get: operations['DictController_findOneData']
    put?: never
    post?: never
    /** 删除字典数据 */
    delete: operations['DictController_removeData']
    options?: never
    head?: never
    /** 更新字典数据 */
    patch: operations['DictController_updateData']
    trace?: never
  }
  '/api/system/dict/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典详情 */
    get: operations['DictController_findOne']
    put?: never
    post?: never
    /** 删除字典 */
    delete: operations['DictController_remove']
    options?: never
    head?: never
    /** 更新字典 */
    patch: operations['DictController_update']
    trace?: never
  }
  '/api/system/menu': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取菜单列表 */
    get: operations['MenuController_findAll']
    put?: never
    /** 创建菜单 */
    post: operations['MenuController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/menu/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取菜单详情 */
    get: operations['MenuController_findOne']
    put?: never
    post?: never
    /** 删除菜单 */
    delete: operations['MenuController_remove']
    options?: never
    head?: never
    /** 更新菜单 */
    patch: operations['MenuController_update']
    trace?: never
  }
  '/api/system/role': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取权限列表 */
    get: operations['RoleController_findAll']
    put?: never
    /** 创建权限 */
    post: operations['RoleController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/role/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取权限详情 */
    get: operations['RoleController_findOne']
    put?: never
    post?: never
    /** 删除权限 */
    delete: operations['RoleController_remove']
    options?: never
    head?: never
    /** 更新权限 */
    patch: operations['RoleController_update']
    trace?: never
  }
  '/api/system/post': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取岗位列表 */
    get: operations['PostController_findAll']
    put?: never
    /** 创建岗位 */
    post: operations['PostController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/post/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取岗位详情 */
    get: operations['PostController_findOne']
    put?: never
    post?: never
    /** 删除岗位 */
    delete: operations['PostController_remove']
    options?: never
    head?: never
    /** 更新岗位 */
    patch: operations['PostController_update']
    trace?: never
  }
  '/api/monitor/operation-log': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取操作日志列表 */
    get: operations['OperationLogController_findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/operation-log/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取操作日志详情 */
    get: operations['OperationLogController_findOne']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/login-log': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取登录日志列表 */
    get: operations['LoginLogController_findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/login-log/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取登录日志详情 */
    get: operations['LoginLogController_findOne']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 运行信息 */
    get: operations['InfoController_systemInfo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    SignUpDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
    }
    SignInDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
    }
    SignInEntity: {
      accessToken: string
      refreshToken: string
    }
    RefreshTokenDto: {
      refreshToken: string
    }
    CreateFactoryDto: {
      /**
       * @description 工厂名称
       * @example 工厂1
       */
      name: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 行业
       * @example 新能源
       */
      industry?: string
      /**
       * @description 地址编码
       * @example 130010
       */
      code?: string
      /**
       * @description 省份
       * @example 广东省
       */
      province?: string
      /**
       * @description 城市
       * @example 广州市
       */
      city?: string
      /**
       * @description 区县
       * @example 天河区
       */
      county?: string
      /**
       * @description 工厂地址
       * @example 地址1
       */
      address?: string
      /**
       * @description 工厂坐标(经度)
       * @default
       * @example 1.1
       */
      longitude: string
      /**
       * @description 工厂坐标(纬度)
       * @default
       * @example 1.1
       */
      latitude: string
      /**
       * @description 工厂描述
       * @default
       * @example 描述1
       */
      remark: string
      /**
       * @description 父级id
       * @example 1
       */
      parentId?: number
    }
    FactoryEntity: {
      id: number
      name: string
      status: boolean
      code: string
      industry: string
      province: string
      city: string
      county: string
      address: string
      longitude: string
      latitude: string
      parentId: number | null
      remark: string
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    ImportValveDataDto: {
      files: string[]
      factoryId: number
      reportMode?: string
    }
    ReportDto: {
      /**
       * @description 工厂id
       * @example 1
       */
      factoryId?: number
      /**
       * @description 分析任务id
       * @example 1
       */
      analysisTaskId?: number
      /**
       * @description 报告模式
       * @example factory
       */
      reportMode?: string
      /**
       * @description 阀门ids
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      valveTags?: string[]
    }
    UpdateFactoryDto: {
      id: number
      /**
       * @description 工厂名称
       * @example 工厂1
       */
      name?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 行业
       * @example 新能源
       */
      industry?: string
      /**
       * @description 地址编码
       * @example 130010
       */
      code?: string
      /**
       * @description 省份
       * @example 广东省
       */
      province?: string
      /**
       * @description 城市
       * @example 广州市
       */
      city?: string
      /**
       * @description 区县
       * @example 天河区
       */
      county?: string
      /**
       * @description 工厂地址
       * @example 地址1
       */
      address?: string
      /**
       * @description 工厂坐标(经度)
       * @default
       * @example 1.1
       */
      longitude: string
      /**
       * @description 工厂坐标(纬度)
       * @default
       * @example 1.1
       */
      latitude: string
      /**
       * @description 工厂描述
       * @default
       * @example 描述1
       */
      remark: string
      /**
       * @description 父级id
       * @example 1
       */
      parentId?: number
    }
    CreateUnitDto: {
      /**
       * @description 装置名称
       * @example 装置1
       */
      name: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 装置描述
       * @default
       * @example 这是一个装置
       */
      remark: string
      /**
       * @description 工厂id
       * @example 1
       */
      factoryId: number
      /**
       * @description 阀门ids
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      valveIds?: number[]
    }
    UnitEntity: {
      id: number
      name: string
      status: boolean
      remark: string
      factoryId: number
      factories: components['schemas']['FactoryEntity']
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    PaginateResponse: {
      /**
       * @description 页码
       * @default 1
       * @example 1
       */
      current: number
      /**
       * @description 每页数量
       * @default 10
       * @example 10
       */
      pageSize: number
    }
    UpdateUnitDto: {
      id: number
      /**
       * @description 装置名称
       * @example 装置1
       */
      name?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 装置描述
       * @default
       * @example 这是一个装置
       */
      remark: string
      /**
       * @description 工厂id
       * @example 1
       */
      factoryId?: number
      /**
       * @description 阀门ids
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      valveIds?: number[]
    }
    CreateValveDto: {
      /**
       * @description 阀门位号
       * @example FV-3001B
       */
      tag: string
      /**
       * @description 来源
       * @example hart
       */
      source?: string
      /**
       * @description 介质
       * @example 氨水
       */
      fluidName?: string
      /**
       * @description 关键应用
       * @example 反应器
       */
      criticalApplication?: string
      /**
       * @description 阀体序列号
       * @example 123456
       */
      serialNumber?: string
      /**
       * Format: date-time
       * @description 投用时间
       * @example 1714752000000
       */
      since?: string
      /**
       * @description 阀体品牌
       * @example Fisher
       */
      valveBrand?: string
      /**
       * @description 系列
       * @example 系列
       */
      valveSeries?: string
      /**
       * @description 阀体类型
       * @example 球阀
       */
      valveType?: string
      /**
       * @description 阀体口径
       * @example DN50
       */
      valveSize?: string
      /**
       * @description 阀体流量系数
       * @example DN50
       */
      valveCv?: string
      /**
       * @description 阀体磅级
       * @example DN50
       */
      valveRating?: string
      /**
       * @description 阀体阀杆尺寸
       * @example DN50
       */
      valveStemSize?: string
      /**
       * @description 阀体连接形式
       * @example 法兰
       */
      valveEndConnection?: string
      /**
       * @description 阀体阀体材质
       * @example 碳钢
       */
      valveBodyMaterial?: string
      /**
       * @description 阀盖形式
       * @example 法兰
       */
      valveBonnet?: string
      /**
       * @description 流量特性
       * @example 316
       */
      valveTrim?: string
      /**
       * @description 阀体泄漏等级
       * @example V
       */
      valveSeatLeakage?: string
      /**
       * @description 阀体描述
       * @example ...
       */
      valveDescription?: string
      /**
       * @description 执行机构品牌
       * @example Fisher
       */
      actuatorBrand?: string
      /**
       * @description 执行机构系列
       * @example 系列1
       */
      actuatorSeries?: string
      /**
       * @description 执行机构尺寸
       * @example DN50
       */
      actuatorSize?: string
      /**
       * @description 故障位置
       * @example DN50
       */
      actuatorFailurePosition?: string
      /**
       * @description 手轮
       * @example 有
       */
      handwheel?: string
      /**
       * @description 执行机构描述
       * @example ...
       */
      actuatorDescription?: string
      /**
       * @description 定位器品牌
       * @example Fisher
       */
      positionerBrand?: string
      /**
       * @description 定位器类型
       * @example 气动
       */
      positionerModel?: string
      /**
       * @description 定位器描述
       * @example ...
       */
      positionerDescription?: string
      /**
       * @description 限位开关品牌
       * @example LS BRAND
       */
      lsBrand?: string
      /**
       * @description 限位开关型号
       * @example LS MODEL
       */
      lsModel?: string
      /**
       * @description 限位开关数量
       * @example 10
       */
      lsQty?: number
      /**
       * @description 限位开关描述
       * @example ...
       */
      lsDescription?: string
      /**
       * @description 气控阀品牌
       * @example PILOT BRAND
       */
      pilotBrand?: string
      /**
       * @description 气控阀型号
       * @example PILOT MODEL
       */
      pilotModel?: string
      /**
       * @description 气控阀数量
       * @example 10
       */
      pilotQty?: number
      /**
       * @description 气控阀描述
       * @example ...
       */
      pilotDescription?: string
      /**
       * @description 快排阀品牌
       * @example QE BRAND
       */
      qeBrand?: string
      /**
       * @description 快排阀型号
       * @example QE MODEL
       */
      qeModel?: string
      /**
       * @description 快排阀数量
       * @example 10
       */
      qeQty?: number
      /**
       * @description 快排阀描述
       * @example ...
       */
      qeDescription?: string
      /**
       * @description 过滤减压阀品牌
       * @example REGULATOR BRAND
       */
      regulatorBrand?: string
      /**
       * @description 过滤减压阀型号
       * @example REGULATOR MODEL
       */
      regulatorModel?: string
      /**
       * @description 过滤减压阀描述
       * @example ...
       */
      regulatorDescription?: string
      /**
       * @description 信号比较器品牌
       * @example SIGNAL COMPARATOR BRAND
       */
      signalComparatorBrand?: string
      /**
       * @description 信号比较器型号
       * @example SIGNAL COMPARATOR MODEL
       */
      signalComparatorModel?: string
      /**
       * @description 信号比较器描述
       * @example ...
       */
      signalComparatorDescription?: string
      /**
       * @description 电磁阀品牌
       * @example SOV BRAND
       */
      sovBrand?: string
      /**
       * @description 电磁阀型号
       * @example SOV MODEL
       */
      sovModel?: string
      /**
       * @description 电磁阀数量
       * @example 10
       */
      sovQty?: number
      /**
       * @description 电磁阀描述
       * @example ...
       */
      sovDescription?: string
      /**
       * @description 保位阀品牌
       * @example TRIP VALVE BRAND
       */
      tripValveBrand?: string
      /**
       * @description 保位阀型号
       * @example TRIP VALVE MODEL
       */
      tripValveModel?: string
      /**
       * @description 保位阀描述
       * @example ...
       */
      tripValveDescription?: string
      /**
       * @description 放大器品牌
       * @example VB BRAND
       */
      vbBrand?: string
      /**
       * @description 放大器型号
       * @example VB MODEL
       */
      vbModel?: string
      /**
       * @description 放大器数量
       * @example 10
       */
      vbQty?: number
      /**
       * @description 放大器描述
       * @example ...
       */
      vbDescription?: string
      /**
       * @description 附件种类
       * @example ...
       */
      accessory?: string
      /**
       * @description 附件品牌
       * @example ...
       */
      accessoryBrand?: string
      /**
       * @description 附件类型
       * @example ...
       */
      accessoryType?: string
      /**
       * @description 附件数量
       * @example 1
       */
      accessoryQuantity?: number
      /**
       * @description 附件描述
       * @example ...
       */
      accessoryDescription?: string
      /**
       * @description 备注
       * @example ...
       */
      remark?: string
      /**
       * @description 装置id
       * @example 1
       */
      unitId?: number
      /**
       * @description 工厂id
       * @example 1
       */
      factoryId: number
      /**
       * @description 分析任务id
       * @example 1
       */
      analysisTaskId?: number
    }
    ValveEntity: {
      id: number
      source: string
      no: string
      tag: string
      fluidName: string
      criticalApplication: string
      /** Format: date-time */
      since: string
      serialNumber: string
      valveBrand: string
      valveSeries: string
      valveSize: string
      valveCv: string
      valveRating: string
      valveEndConnection: string
      valveBodyMaterial: string
      valveBonnet: string
      valveTrim: string
      valveSeatLeakage: string
      valveDescription: string
      actuatorBrand: string
      actuatorSeries: string
      actuatorSize: string
      handwheel: string
      actuatorDescription: string
      actuatorFailurePosition: string
      regulatorBrand: string
      regulatorModel: string
      regulatorDescription: string
      positionerBrand: string
      positionerModel: string
      positionerDescription: string
      sovBrand: string
      sovModel: string
      sovQty: number
      sovDescription: string
      lsBrand: string
      lsModel: string
      lsQty: number
      lsDescription: string
      tripValveBrand: string
      tripValveModel: string
      tripValveDescription: string
      vbBrand: string
      vbModel: string
      vbQty: number
      vbDescription: string
      qeBrand: string
      qeModel: string
      qeQty: number
      qeDescription: string
      pilotBrand: string
      pilotModel: string
      pilotQty: number
      pilotDescription: string
      valveStemSize: string
      stroke: string
      signalComparatorBrand: string
      signalComparatorModel: string
      signalComparatorDescription: string
      parts: string
      analysisTaskId: number
      factoryId: number
      factory: components['schemas']['FactoryEntity']
      unitId: number
      unit: components['schemas']['UnitEntity']
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    ValveHistoryDataEntity: {
      id: number
      tag: string
      valveId: number
      /** Format: date-time */
      time: string
      data: Record<string, never>
    }
    UpdateValveDto: {
      id: number
      /**
       * @description 阀门位号
       * @example FV-3001B
       */
      tag?: string
      /**
       * @description 来源
       * @example hart
       */
      source?: string
      /**
       * @description 介质
       * @example 氨水
       */
      fluidName?: string
      /**
       * @description 关键应用
       * @example 反应器
       */
      criticalApplication?: string
      /**
       * @description 阀体序列号
       * @example 123456
       */
      serialNumber?: string
      /**
       * Format: date-time
       * @description 投用时间
       * @example 1714752000000
       */
      since?: string
      /**
       * @description 阀体品牌
       * @example Fisher
       */
      valveBrand?: string
      /**
       * @description 系列
       * @example 系列
       */
      valveSeries?: string
      /**
       * @description 阀体类型
       * @example 球阀
       */
      valveType?: string
      /**
       * @description 阀体口径
       * @example DN50
       */
      valveSize?: string
      /**
       * @description 阀体流量系数
       * @example DN50
       */
      valveCv?: string
      /**
       * @description 阀体磅级
       * @example DN50
       */
      valveRating?: string
      /**
       * @description 阀体阀杆尺寸
       * @example DN50
       */
      valveStemSize?: string
      /**
       * @description 阀体连接形式
       * @example 法兰
       */
      valveEndConnection?: string
      /**
       * @description 阀体阀体材质
       * @example 碳钢
       */
      valveBodyMaterial?: string
      /**
       * @description 阀盖形式
       * @example 法兰
       */
      valveBonnet?: string
      /**
       * @description 流量特性
       * @example 316
       */
      valveTrim?: string
      /**
       * @description 阀体泄漏等级
       * @example V
       */
      valveSeatLeakage?: string
      /**
       * @description 阀体描述
       * @example ...
       */
      valveDescription?: string
      /**
       * @description 执行机构品牌
       * @example Fisher
       */
      actuatorBrand?: string
      /**
       * @description 执行机构系列
       * @example 系列1
       */
      actuatorSeries?: string
      /**
       * @description 执行机构尺寸
       * @example DN50
       */
      actuatorSize?: string
      /**
       * @description 故障位置
       * @example DN50
       */
      actuatorFailurePosition?: string
      /**
       * @description 手轮
       * @example 有
       */
      handwheel?: string
      /**
       * @description 执行机构描述
       * @example ...
       */
      actuatorDescription?: string
      /**
       * @description 定位器品牌
       * @example Fisher
       */
      positionerBrand?: string
      /**
       * @description 定位器类型
       * @example 气动
       */
      positionerModel?: string
      /**
       * @description 定位器描述
       * @example ...
       */
      positionerDescription?: string
      /**
       * @description 限位开关品牌
       * @example LS BRAND
       */
      lsBrand?: string
      /**
       * @description 限位开关型号
       * @example LS MODEL
       */
      lsModel?: string
      /**
       * @description 限位开关数量
       * @example 10
       */
      lsQty?: number
      /**
       * @description 限位开关描述
       * @example ...
       */
      lsDescription?: string
      /**
       * @description 气控阀品牌
       * @example PILOT BRAND
       */
      pilotBrand?: string
      /**
       * @description 气控阀型号
       * @example PILOT MODEL
       */
      pilotModel?: string
      /**
       * @description 气控阀数量
       * @example 10
       */
      pilotQty?: number
      /**
       * @description 气控阀描述
       * @example ...
       */
      pilotDescription?: string
      /**
       * @description 快排阀品牌
       * @example QE BRAND
       */
      qeBrand?: string
      /**
       * @description 快排阀型号
       * @example QE MODEL
       */
      qeModel?: string
      /**
       * @description 快排阀数量
       * @example 10
       */
      qeQty?: number
      /**
       * @description 快排阀描述
       * @example ...
       */
      qeDescription?: string
      /**
       * @description 过滤减压阀品牌
       * @example REGULATOR BRAND
       */
      regulatorBrand?: string
      /**
       * @description 过滤减压阀型号
       * @example REGULATOR MODEL
       */
      regulatorModel?: string
      /**
       * @description 过滤减压阀描述
       * @example ...
       */
      regulatorDescription?: string
      /**
       * @description 信号比较器品牌
       * @example SIGNAL COMPARATOR BRAND
       */
      signalComparatorBrand?: string
      /**
       * @description 信号比较器型号
       * @example SIGNAL COMPARATOR MODEL
       */
      signalComparatorModel?: string
      /**
       * @description 信号比较器描述
       * @example ...
       */
      signalComparatorDescription?: string
      /**
       * @description 电磁阀品牌
       * @example SOV BRAND
       */
      sovBrand?: string
      /**
       * @description 电磁阀型号
       * @example SOV MODEL
       */
      sovModel?: string
      /**
       * @description 电磁阀数量
       * @example 10
       */
      sovQty?: number
      /**
       * @description 电磁阀描述
       * @example ...
       */
      sovDescription?: string
      /**
       * @description 保位阀品牌
       * @example TRIP VALVE BRAND
       */
      tripValveBrand?: string
      /**
       * @description 保位阀型号
       * @example TRIP VALVE MODEL
       */
      tripValveModel?: string
      /**
       * @description 保位阀描述
       * @example ...
       */
      tripValveDescription?: string
      /**
       * @description 放大器品牌
       * @example VB BRAND
       */
      vbBrand?: string
      /**
       * @description 放大器型号
       * @example VB MODEL
       */
      vbModel?: string
      /**
       * @description 放大器数量
       * @example 10
       */
      vbQty?: number
      /**
       * @description 放大器描述
       * @example ...
       */
      vbDescription?: string
      /**
       * @description 附件种类
       * @example ...
       */
      accessory?: string
      /**
       * @description 附件品牌
       * @example ...
       */
      accessoryBrand?: string
      /**
       * @description 附件类型
       * @example ...
       */
      accessoryType?: string
      /**
       * @description 附件数量
       * @example 1
       */
      accessoryQuantity?: number
      /**
       * @description 附件描述
       * @example ...
       */
      accessoryDescription?: string
      /**
       * @description 备注
       * @example ...
       */
      remark?: string
      /**
       * @description 装置id
       * @example 1
       */
      unitId?: number
      /**
       * @description 工厂id
       * @example 1
       */
      factoryId?: number
      /**
       * @description 分析任务id
       * @example 1
       */
      analysisTaskId?: number
    }
    CreateAnalysisTaskDto: {
      /**
       * @description 任务名称
       * @example 分析任务1
       */
      name: string
      /**
       * @description 状态 (0: 待执行, 1: 执行中, 2: 已完成, 3: 失败)
       * @default 0
       * @example 1
       */
      status: number
      /** @description 文件地址 */
      files: string[]
      /**
       * @description 工厂ID
       * @example 1
       */
      factoryId: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    AnalysisTaskEntity: {
      id: number
      name: string
      status: number
      remark: string
      files: string[]
      factoryId: number
      result: number[]
      ruleId: number
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UploadDto: {
      files: string[]
    }
    UpdateAnalysisTaskDto: {
      id: number
      /**
       * @description 任务名称
       * @example 分析任务1
       */
      name?: string
      /**
       * @description 状态 (0: 待执行, 1: 执行中, 2: 已完成, 3: 失败)
       * @default 0
       * @example 1
       */
      status: number
      /** @description 文件地址 */
      files?: string[]
      /**
       * @description 工厂ID
       * @example 1
       */
      factoryId?: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    CreateUserDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * Format: uri
       * @description 头像
       * @example http://xxx.com/xxx.jpg
       */
      avatar?: string
      /**
       * Format: email
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /**
       * @description 手机号
       * @example 18888888888
       */
      phoneNumber?: string
      /**
       * @description 性别 0: 女 1: 男
       * @default 1
       * @example 1
       */
      sex: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 岗位ID
       * @example 1
       */
      postId?: number
      /**
       * @description 部门ID
       * @example 1
       */
      deptId?: number
      /**
       * @description 角色ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      roleIds?: number[]
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    RoleEntity: {
      id: number
      name: string
      value: string
      order: number
      status: boolean
      remark: string
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UserEntity: {
      id: number
      isAdmin: boolean
      username: string
      nickname: string
      avatar: string
      email: string
      phoneNumber: string
      sex: number
      status: boolean
      createBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      remark: string
      roles: components['schemas']['RoleEntity'][]
      roleIds: number[]
    }
    ChangePasswordDto: {
      id: number
      /** @default  */
      oldPassword: string
      password: string
    }
    UpdateUserDto: {
      id: number
      /**
       * @description 账号
       * @example admin
       */
      username?: string
      /**
       * @description 密码
       * @example 123456
       */
      password?: string
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * Format: uri
       * @description 头像
       * @example http://xxx.com/xxx.jpg
       */
      avatar?: string
      /**
       * Format: email
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /**
       * @description 手机号
       * @example 18888888888
       */
      phoneNumber?: string
      /**
       * @description 性别 0: 女 1: 男
       * @default 1
       * @example 1
       */
      sex: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 岗位ID
       * @example 1
       */
      postId?: number
      /**
       * @description 部门ID
       * @example 1
       */
      deptId?: number
      /**
       * @description 角色ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      roleIds?: number[]
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    CreateDeptDto: {
      /**
       * @description 部门名称
       * @example 技术部
       */
      name: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 负责人
       * @example 张三
       */
      leader?: string
      /**
       * @description 负责人电话
       * @example 13000000000
       */
      phone?: string
      /**
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /** @description 上级部门ID */
      parentId?: number
    }
    DeptEntity: {
      id: number
      name: string
      order: number
      leader: string
      phone: string
      email: string
      parentId: number | null
      children?: components['schemas']['DeptEntity'][] | null
      createBy: string
      updateBy: string | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateDeptDto: {
      id: number
      /**
       * @description 部门名称
       * @example 技术部
       */
      name?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 负责人
       * @example 张三
       */
      leader?: string
      /**
       * @description 负责人电话
       * @example 13000000000
       */
      phone?: string
      /**
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /** @description 上级部门ID */
      parentId?: number
    }
    CreateDictDto: {
      /**
       * @description 字典名称
       * @example 性别
       */
      name: string
      /**
       * @description 字典值
       * @example 1
       */
      value: string
      /**
       * @description 状态
       * @example true
       */
      status?: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    DictEntity: {
      id: number
      name: string
      value: string
      status: boolean
      createBy: string
      updateBy: string | null
      remark: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    CreateDictDataDto: {
      /**
       * @description 字典数据名称
       * @example 性别
       */
      name: string
      /**
       * @description 字典数据值
       * @example 1
       */
      value: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 字典ID
       * @example 1
       */
      dictId: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    DictDataEntity: {
      id: number
      name: string
      value: string
      order: number
      status: boolean
      dictId: number
      createBy: string
      updateBy: string | null
      remark: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateDictDataDto: {
      id: number
      /**
       * @description 字典数据名称
       * @example 性别
       */
      name?: string
      /**
       * @description 字典数据值
       * @example 1
       */
      value?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 字典ID
       * @example 1
       */
      dictId?: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    UpdateDictDto: {
      id: number
      /**
       * @description 字典名称
       * @example 性别
       */
      name?: string
      /**
       * @description 字典值
       * @example 1
       */
      value?: string
      /**
       * @description 状态
       * @example true
       */
      status?: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    CreateMenuDto: {
      /**
       * @description 菜单类别
       * @example menu
       * @enum {string}
       */
      type: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      /**
       * @description 菜单名称
       * @example 系统管理
       */
      name: string
      /**
       * @description 菜单路径
       * @example /system
       */
      path?: string
      /**
       * @description 菜单标题 (配置页面的标题,配合国际化使用)
       * @example "system.title
       */
      title?: string
      /**
       * @description 菜单图标
       * @example i-line-md:external-link
       */
      icon?: string
      /**
       * @description 激活菜单图标
       * @example i-line-md:external-link
       */
      actionIcon?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 作为路由时，需要激活的菜单的Path
       * @example /system
       */
      activePath?: string
      /**
       * @description 固定在标签栏
       * @default true
       * @example true
       */
      affixTab: boolean
      /**
       * @description 在标签栏固定的顺序
       * @default 1
       * @example 1
       */
      affixTabOrder: number
      /**
       * @description 徽标内容 (当徽标类型为normal时有效)
       * @example new
       */
      badge?: string
      /**
       * @description 徽标类型
       * @example dot
       */
      badgeType?: Record<string, never>
      /**
       * @description 徽标颜色
       * @example default
       */
      badgeVariants?: Record<string, never>
      /**
       * @description 在菜单中隐藏下级
       * @default false
       * @example false
       */
      hideChildrenInMenu: boolean
      /**
       * @description 在面包屑中隐藏
       * @default false
       * @example false
       */
      hideInBreadcrumb: boolean
      /**
       * @description 在菜单中隐藏
       * @default false
       * @example false
       */
      hideInMenu: boolean
      /**
       * @description 在标签栏中隐藏
       * @default false
       * @example false
       */
      hideInTab: boolean
      /**
       * @description 内嵌Iframe的URL
       * @example www.example.com
       */
      iframeSrc?: string
      /**
       * @description 外链页面的URL
       * @example www.example.com
       */
      link?: string
      /**
       * @description 是否缓存页面
       * @default false
       * @example false
       */
      keepAlive: boolean
      /**
       * @description 同一个路由最大打开的标签数
       * @default 1
       * @example 1
       */
      maxNumOfOpenTabs: number
      /**
       * @description 无需基础布局
       * @default false
       * @example false
       */
      noBasicLayout: boolean
      /**
       * @description 是否在新窗口打开
       * @default false
       * @example false
       */
      openInNewWindow: boolean
      /**
       * @description 额外的路由参数
       * @example /:id
       */
      query?: string
      /**
       * @description 重定向
       * @example /system
       */
      redirect?: string
      /**
       * @description 排序
       * @default 1
       * @example 1
       */
      order: number
      /**
       * @description 权限标识
       * @example system:menu:list
       */
      permission?: string
      /**
       * @description 父级菜单id
       * @example 0
       */
      parentId?: number
    }
    MenuEntity: {
      /** @enum {string} */
      type: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      /** @enum {string|null} */
      badgeType: 'dot' | 'normal' | null
      /** @enum {string|null} */
      badgeVariants: 'default' | 'success' | 'error' | 'warning' | 'info' | null
      id: number
      name: string
      title: string | null
      path: string
      icon: string | null
      activeIcon: string | null
      status: boolean
      activePath: string | null
      affixTab: boolean
      affixTabOrder: number
      badge: string | null
      hideChildrenInMenu: boolean
      hideInMenu: boolean
      hideInBreadcrumb: boolean
      hideInTab: boolean
      iframeSrc: string | null
      link: string | null
      keepAlive: boolean
      maxNumOfOpenTabs: number | null
      noBasicLayout: boolean
      openInNewWindow: boolean
      query: string | null
      redirect: string | null
      order: number
      parentId: number | null
      children?: components['schemas']['MenuEntity'][] | null
      permission: string
    }
    UpdateMenuDto: {
      /**
       * @description 菜单类别
       * @example menu
       * @enum {string}
       */
      type?: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      id: number
      /**
       * @description 菜单名称
       * @example 系统管理
       */
      name?: string
      /**
       * @description 菜单路径
       * @example /system
       */
      path?: string
      /**
       * @description 菜单标题 (配置页面的标题,配合国际化使用)
       * @example "system.title
       */
      title?: string
      /**
       * @description 菜单图标
       * @example i-line-md:external-link
       */
      icon?: string
      /**
       * @description 激活菜单图标
       * @example i-line-md:external-link
       */
      actionIcon?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 作为路由时，需要激活的菜单的Path
       * @example /system
       */
      activePath?: string
      /**
       * @description 固定在标签栏
       * @default true
       * @example true
       */
      affixTab: boolean
      /**
       * @description 在标签栏固定的顺序
       * @default 1
       * @example 1
       */
      affixTabOrder: number
      /**
       * @description 徽标内容 (当徽标类型为normal时有效)
       * @example new
       */
      badge?: string
      /**
       * @description 徽标类型
       * @example dot
       */
      badgeType?: Record<string, never>
      /**
       * @description 徽标颜色
       * @example default
       */
      badgeVariants?: Record<string, never>
      /**
       * @description 在菜单中隐藏下级
       * @default false
       * @example false
       */
      hideChildrenInMenu: boolean
      /**
       * @description 在面包屑中隐藏
       * @default false
       * @example false
       */
      hideInBreadcrumb: boolean
      /**
       * @description 在菜单中隐藏
       * @default false
       * @example false
       */
      hideInMenu: boolean
      /**
       * @description 在标签栏中隐藏
       * @default false
       * @example false
       */
      hideInTab: boolean
      /**
       * @description 内嵌Iframe的URL
       * @example www.example.com
       */
      iframeSrc?: string
      /**
       * @description 外链页面的URL
       * @example www.example.com
       */
      link?: string
      /**
       * @description 是否缓存页面
       * @default false
       * @example false
       */
      keepAlive: boolean
      /**
       * @description 同一个路由最大打开的标签数
       * @default 1
       * @example 1
       */
      maxNumOfOpenTabs: number
      /**
       * @description 无需基础布局
       * @default false
       * @example false
       */
      noBasicLayout: boolean
      /**
       * @description 是否在新窗口打开
       * @default false
       * @example false
       */
      openInNewWindow: boolean
      /**
       * @description 额外的路由参数
       * @example /:id
       */
      query?: string
      /**
       * @description 重定向
       * @example /system
       */
      redirect?: string
      /**
       * @description 排序
       * @default 1
       * @example 1
       */
      order: number
      /**
       * @description 权限标识
       * @example system:menu:list
       */
      permission?: string
      /**
       * @description 父级菜单id
       * @example 0
       */
      parentId?: number
    }
    CreateRoleDto: {
      /**
       * @description 权限名称
       * @example 管理员
       */
      name: string
      /**
       * @description 权限值
       * @example admin
       */
      value: string
      /**
       * @description 排序
       * @default 0
       * @example 0
       */
      order: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds: number[]
    }
    UpdateRoleDto: {
      id: number
      /**
       * @description 权限名称
       * @example 管理员
       */
      name?: string
      /**
       * @description 权限值
       * @example admin
       */
      value?: string
      /**
       * @description 排序
       * @default 0
       * @example 0
       */
      order: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    CreatePostDto: {
      /**
       * @description 岗位编码
       * @example tech
       */
      code: string
      /**
       * @description 岗位名称
       * @example 技术部
       */
      name: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 备注
       * @example 这是一个技术部
       */
      remark?: string
    }
    PostEntity: {
      id: number
      code: string
      name: string
      order: number
      remark: string
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdatePostDto: {
      id: number
      /**
       * @description 岗位编码
       * @example tech
       */
      code?: string
      /**
       * @description 岗位名称
       * @example 技术部
       */
      name?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 备注
       * @example 这是一个技术部
       */
      remark?: string
    }
    OperationLogEntity: {
      id: number
      title: string
      businessType: number
      module: string
      username: string
      ip: string
      address: string
      /** Format: date-time */
      createdAt: string
    }
    LoginLogEntity: {
      id: number
      username: string
      status: boolean
      ip: string
      address: string
      browser: string
      os: string
      message: string
      /** Format: date-time */
      loginTime: string
      /** Format: date-time */
      createdAt: string
    }
    InfoEntity: {
      cpu: {
        cores: number
        brand: string
        manufacturer: string
        speed: string
      }
      memory: {
        total: string
        free: string
        used: string
        usage: string
      }
      osInfo: {
        platform: string
        release: string
        arch: string
        hostname: string
      }
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AuthenticationController_signUp: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthenticationController_signIn: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignInEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthenticationController_refreshTokens: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignInEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  FactoryController_findAll: {
    parameters: {
      query?: {
        filterId?: number
        /** @description 工厂名称 */
        name?: string
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>[]
        }
      }
    }
  }
  FactoryController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateFactoryDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FactoryEntity']
        }
      }
    }
  }
  FactoryController_importValveData: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ImportValveDataDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  FactoryController_generateReport: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReportDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReportDto']
        }
      }
    }
  }
  FactoryController_findChartData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FactoryEntity']
        }
      }
    }
  }
  FactoryController_removeAll: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  FactoryController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FactoryEntity']
        }
      }
    }
  }
  FactoryController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  FactoryController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateFactoryDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FactoryEntity']
        }
      }
    }
  }
  UnitController_findAll: {
    parameters: {
      query?: {
        /** @description 装置名称 */
        name?: string
        /** @description 工厂id */
        factoryId?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['UnitEntity'][]
          }
        }
      }
    }
  }
  UnitController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUnitDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnitEntity']
        }
      }
    }
  }
  UnitController_removeAll: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  UnitController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnitEntity']
        }
      }
    }
  }
  UnitController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  UnitController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUnitDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UnitEntity']
        }
      }
    }
  }
  ValveController_findAll: {
    parameters: {
      query?: {
        /** @description 阀门位号 */
        tag?: string
        /** @description 工厂id */
        factoryId?: number
        /** @description 装置id */
        unitId?: number
        /** @description 分析任务id */
        analysisTaskId?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['ValveEntity'][]
          }
        }
      }
    }
  }
  ValveController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateValveDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValveEntity']
        }
      }
    }
  }
  ValveController_exportValveList: {
    parameters: {
      query?: {
        /** @description 阀门位号 */
        tag?: string
        /** @description 工厂id */
        factoryId?: number
        /** @description 装置id */
        unitId?: number
        /** @description 分析任务id */
        analysisTaskId?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['ValveEntity'][]
          }
        }
      }
    }
  }
  ValveController_findHistoryDataList: {
    parameters: {
      query: {
        valveId: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValveHistoryDataEntity'][]
        }
      }
    }
  }
  ValveController_findHistoryData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  ValveController_findScoreList: {
    parameters: {
      query: {
        valveId: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>[]
        }
      }
    }
  }
  ValveController_findScore: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  ValveController_removeAll: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  ValveController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValveEntity']
        }
      }
    }
  }
  ValveController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  ValveController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateValveDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ValveEntity']
        }
      }
    }
  }
  AnalysisTaskController_findAll: {
    parameters: {
      query?: {
        /** @description 任务名称 */
        name?: string
        /** @description 状态 (0: 待执行, 1: 执行中, 2: 已完成, 3: 失败) */
        status?: number
        /** @description 工厂ID */
        factoryId?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['AnalysisTaskEntity'][]
          }
        }
      }
    }
  }
  AnalysisTaskController_create: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAnalysisTaskDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysisTaskEntity']
        }
      }
    }
  }
  AnalysisTaskController_execute: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  AnalysisTaskController_upload: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    /** @description 上传PDF文件 */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  AnalysisTaskController_result: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  AnalysisTaskController_removeAll: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  AnalysisTaskController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysisTaskEntity']
        }
      }
    }
  }
  AnalysisTaskController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  AnalysisTaskController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAnalysisTaskDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AnalysisTaskEntity']
        }
      }
    }
  }
  UserController_findAll: {
    parameters: {
      query?: {
        /** @description 账号 */
        username?: string
        /** @description 昵称 */
        nickname?: string
        /** @description 邮箱 */
        email?: string
        /** @description 手机号 */
        phoneNumber?: string
        /** @description 性别 0: 女 1: 男 */
        sex?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['UserEntity'][]
          }
        }
      }
    }
  }
  UserController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findSelf: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findSelfCode: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  UserController_changePassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  UserController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  DeptController_findAll: {
    parameters: {
      query?: {
        /** @description 部门名称 */
        name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity'][]
        }
      }
    }
  }
  DeptController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeptDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DeptController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DeptController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeptController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDeptDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DictController_findAll: {
    parameters: {
      query?: {
        /** @description 字典名称 */
        name?: string
        /** @description 字典值 */
        value?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity'][]
        }
      }
    }
  }
  DictController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDictDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  DictController_findAllData: {
    parameters: {
      query?: {
        /** @description 字典名称 */
        dictName?: string
        /** @description 字典数据名称 */
        name?: string
        /** @description 字典数据值 */
        value?: string
        /** @description 字典ID */
        dictId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity'][]
        }
      }
    }
  }
  DictController_createData: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDictDataDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_findOneData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_removeData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DictController_updateData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDictDataDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  DictController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DictController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDictDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  MenuController_findAll: {
    parameters: {
      query?: {
        /** @description 菜单名称 */
        name?: string
        /** @description 菜单路径 */
        path?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity'][]
        }
      }
    }
  }
  MenuController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMenuDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MenuController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  MenuController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MenuController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMenuDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  RoleController_findAll: {
    parameters: {
      query?: {
        /** @description 权限名称 */
        name?: string
        /** @description 权限值 */
        value?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['RoleEntity'][]
          }
        }
      }
    }
  }
  RoleController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  RoleController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  RoleController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RoleController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  PostController_findAll: {
    parameters: {
      query?: {
        /** @description 岗位名称 */
        name?: string
        /** @description 岗位编码 */
        code?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['PostEntity'][]
          }
        }
      }
    }
  }
  PostController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePostDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  PostController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  PostController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PostController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  OperationLogController_findAll: {
    parameters: {
      query?: {
        username?: string
        businessType?: number
        module?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['OperationLogEntity'][]
          }
        }
      }
    }
  }
  OperationLogController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OperationLogEntity']
        }
      }
    }
  }
  LoginLogController_findAll: {
    parameters: {
      query?: {
        username?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['LoginLogEntity'][]
          }
        }
      }
    }
  }
  LoginLogController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LoginLogEntity']
        }
      }
    }
  }
  InfoController_systemInfo: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InfoEntity']
        }
      }
    }
  }
}
