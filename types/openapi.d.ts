/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/authentication/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 注册 */
        post: operations["AuthenticationController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/authentication/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 登录 */
        post: operations["AuthenticationController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/authentication/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 刷新令牌 */
        post: operations["AuthenticationController_refreshTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/factory": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FactoryController_findAll"];
        put?: never;
        post: operations["FactoryController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/factory/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["FactoryController_findOne"];
        put?: never;
        post?: never;
        delete: operations["FactoryController_remove"];
        options?: never;
        head?: never;
        patch: operations["FactoryController_update"];
        trace?: never;
    };
    "/api/project/unit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UnitController_findAll"];
        put?: never;
        post: operations["UnitController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/unit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UnitController_findOne"];
        put?: never;
        post?: never;
        delete: operations["UnitController_remove"];
        options?: never;
        head?: never;
        patch: operations["UnitController_update"];
        trace?: never;
    };
    "/api/project/valve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ValveController_findAll"];
        put?: never;
        post: operations["ValveController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/valve/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ValveController_findOne"];
        put?: never;
        post?: never;
        delete: operations["ValveController_remove"];
        options?: never;
        head?: never;
        patch: operations["ValveController_update"];
        trace?: never;
    };
    "/api/project/analysis-task": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnalysisTaskController_findAll"];
        put?: never;
        post: operations["AnalysisTaskController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/project/analysis-task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AnalysisTaskController_findOne"];
        put?: never;
        post?: never;
        delete: operations["AnalysisTaskController_remove"];
        options?: never;
        head?: never;
        patch: operations["AnalysisTaskController_update"];
        trace?: never;
    };
    "/api/system/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取用户列表 */
        get: operations["UserController_findAll"];
        put?: never;
        /** 创建用户 */
        post: operations["UserController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/user/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取当前登录用户信息 */
        get: operations["UserController_findSelf"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/user/code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取当前登录用户权限码 */
        get: operations["UserController_findSelfCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/user/changePassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 修改密码 */
        patch: operations["UserController_changePassword"];
        trace?: never;
    };
    "/api/system/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取单个用户信息 */
        get: operations["UserController_findOne"];
        put?: never;
        post?: never;
        /** 删除用户 */
        delete: operations["UserController_remove"];
        options?: never;
        head?: never;
        /** 更新用户 */
        patch: operations["UserController_update"];
        trace?: never;
    };
    "/api/system/dept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取部门列表 */
        get: operations["DeptController_findAll"];
        put?: never;
        /** 创建部门 */
        post: operations["DeptController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/dept/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取部门详情 */
        get: operations["DeptController_findOne"];
        put?: never;
        post?: never;
        /** 删除部门 */
        delete: operations["DeptController_remove"];
        options?: never;
        head?: never;
        /** 更新部门 */
        patch: operations["DeptController_update"];
        trace?: never;
    };
    "/api/system/dict-data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取字典数据列表 */
        get: operations["DictDataController_findAll"];
        put?: never;
        /** 创建字典数据 */
        post: operations["DictDataController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/dict-data/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取字典数据详情 */
        get: operations["DictDataController_findOne"];
        put?: never;
        post?: never;
        /** 删除字典数据 */
        delete: operations["DictDataController_remove"];
        options?: never;
        head?: never;
        /** 更新字典数据 */
        patch: operations["DictDataController_update"];
        trace?: never;
    };
    "/api/system/dict-type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取字典列表 */
        get: operations["DictTypeController_findAll"];
        put?: never;
        /** 创建字典 */
        post: operations["DictTypeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/dict-type/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取字典详情 */
        get: operations["DictTypeController_findOne"];
        put?: never;
        post?: never;
        /** 删除字典 */
        delete: operations["DictTypeController_remove"];
        options?: never;
        head?: never;
        /** 更新字典 */
        patch: operations["DictTypeController_update"];
        trace?: never;
    };
    "/api/system/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取菜单列表 */
        get: operations["MenuController_findAll"];
        put?: never;
        /** 创建菜单 */
        post: operations["MenuController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/menu/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取菜单详情 */
        get: operations["MenuController_findOne"];
        put?: never;
        post?: never;
        /** 删除菜单 */
        delete: operations["MenuController_remove"];
        options?: never;
        head?: never;
        /** 更新菜单 */
        patch: operations["MenuController_update"];
        trace?: never;
    };
    "/api/system/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取权限列表 */
        get: operations["RoleController_findAll"];
        put?: never;
        /** 创建权限 */
        post: operations["RoleController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/role/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取权限详情 */
        get: operations["RoleController_findOne"];
        put?: never;
        post?: never;
        /** 删除权限 */
        delete: operations["RoleController_remove"];
        options?: never;
        head?: never;
        /** 更新权限 */
        patch: operations["RoleController_update"];
        trace?: never;
    };
    "/api/system/post": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取岗位列表 */
        get: operations["PostController_findAll"];
        put?: never;
        /** 创建岗位 */
        post: operations["PostController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/system/post/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取岗位详情 */
        get: operations["PostController_findOne"];
        put?: never;
        post?: never;
        /** 删除岗位 */
        delete: operations["PostController_remove"];
        options?: never;
        head?: never;
        /** 更新岗位 */
        patch: operations["PostController_update"];
        trace?: never;
    };
    "/api/monitor/operation-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取操作日志列表 */
        get: operations["OperationLogController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/monitor/operation-log/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取操作日志详情 */
        get: operations["OperationLogController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/monitor/login-log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取登录日志列表 */
        get: operations["LoginLogController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/monitor/login-log/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 获取登录日志详情 */
        get: operations["LoginLogController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/monitor/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 运行信息 */
        get: operations["InfoController_systemInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignUpDto: {
            /**
             * @description 账号
             * @example admin
             */
            username: string;
            /**
             * @description 昵称
             * @example 管理员
             */
            nickname?: string;
            /**
             * @description 密码
             * @example 123456
             */
            password: string;
        };
        SignInDto: {
            /**
             * @description 账号
             * @example admin
             */
            username: string;
            /**
             * @description 密码
             * @example 123456
             */
            password: string;
        };
        SignInEntity: {
            accessToken: string;
            refreshToken: string;
        };
        RefreshTokenDto: {
            refreshToken: string;
        };
        CreateFactoryDto: Record<string, never>;
        UpdateFactoryDto: Record<string, never>;
        CreateUnitDto: Record<string, never>;
        UpdateUnitDto: Record<string, never>;
        CreateValveDto: Record<string, never>;
        UpdateValveDto: Record<string, never>;
        CreateAnalysisTaskDto: Record<string, never>;
        UpdateAnalysisTaskDto: Record<string, never>;
        CreateUserDto: {
            /**
             * @description 账号
             * @example admin
             */
            username: string;
            /**
             * @description 密码
             * @example 123456
             */
            password: string;
            /**
             * @description 昵称
             * @example 管理员
             */
            nickname?: string;
            /**
             * Format: uri
             * @description 头像
             * @example http://xxx.com/xxx.jpg
             */
            avatar?: string;
            /**
             * Format: email
             * @description 邮箱
             * @example xxx@qq.com
             */
            email?: string;
            /**
             * @description 手机号
             * @example 18888888888
             */
            phoneNumber?: string;
            /**
             * @description 性别 0: 女 1: 男
             * @default 1
             * @example 1
             */
            sex: number;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 岗位ID
             * @example 1
             */
            postId?: number;
            /**
             * @description 部门ID
             * @example 1
             */
            deptId?: number;
            /**
             * @description 角色ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            roleIds?: number[];
            /**
             * @description 菜单ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            menuIds?: number[];
        };
        RoleEntity: {
            id: number;
            name: string;
            value: string;
            order: number;
            status: boolean;
            remark: string;
            createBy: string;
            updateBy: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UserEntity: {
            id: number;
            isAdmin: boolean;
            username: string;
            nickname: string;
            avatar: string;
            email: string;
            phoneNumber: string;
            sex: number;
            status: boolean;
            createBy: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            remark: string;
            role: components["schemas"]["RoleEntity"][];
        };
        PaginateResponse: {
            /**
             * @description 页码
             * @default 1
             * @example 1
             */
            page: number;
            /**
             * @description 每页数量
             * @default 10
             * @example 10
             */
            pageSize: number;
        };
        ChangePasswordDto: {
            id: number;
            /** @default  */
            oldPassword: string;
            password: string;
        };
        UpdateUserDto: {
            id: number;
            /**
             * @description 账号
             * @example admin
             */
            username?: string;
            /**
             * @description 密码
             * @example 123456
             */
            password?: string;
            /**
             * @description 昵称
             * @example 管理员
             */
            nickname?: string;
            /**
             * Format: uri
             * @description 头像
             * @example http://xxx.com/xxx.jpg
             */
            avatar?: string;
            /**
             * Format: email
             * @description 邮箱
             * @example xxx@qq.com
             */
            email?: string;
            /**
             * @description 手机号
             * @example 18888888888
             */
            phoneNumber?: string;
            /**
             * @description 性别 0: 女 1: 男
             * @default 1
             * @example 1
             */
            sex: number;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 岗位ID
             * @example 1
             */
            postId?: number;
            /**
             * @description 部门ID
             * @example 1
             */
            deptId?: number;
            /**
             * @description 角色ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            roleIds?: number[];
            /**
             * @description 菜单ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            menuIds?: number[];
        };
        CreateDeptDto: {
            /**
             * @description 部门名称
             * @example 技术部
             */
            name: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 负责人
             * @example 张三
             */
            leader?: string;
            /**
             * @description 负责人电话
             * @example 13000000000
             */
            phone?: string;
            /**
             * @description 邮箱
             * @example xxx@qq.com
             */
            email?: string;
            /** @description 上级部门ID */
            parentId?: number;
        };
        DeptEntity: {
            id: number;
            name: string;
            order: number;
            leader: string;
            phone: string;
            email: string;
            parentId: number | null;
            children?: components["schemas"]["DeptEntity"][] | null;
            createBy: string;
            updateBy: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateDeptDto: {
            id: number;
            /**
             * @description 部门名称
             * @example 技术部
             */
            name?: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 负责人
             * @example 张三
             */
            leader?: string;
            /**
             * @description 负责人电话
             * @example 13000000000
             */
            phone?: string;
            /**
             * @description 邮箱
             * @example xxx@qq.com
             */
            email?: string;
            /** @description 上级部门ID */
            parentId?: number;
        };
        CreateDictDataDto: {
            /**
             * @description 字典数据名称
             * @example 性别
             */
            name: string;
            /**
             * @description 字典数据值
             * @example 1
             */
            value: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 类型 0: 配置 1: 参数 2: 诊断
             * @example 0
             */
            type?: string;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 字典类型ID
             * @example 1
             */
            dictTypeId: number;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 父级菜单id
             * @example 0
             */
            parentId?: number;
        };
        DictDataEntity: {
            id: number;
            name: string;
            value: string;
            order: number;
            status: boolean;
            type: string;
            cnTitle: string | null;
            enTitle: string | null;
            isChart: boolean;
            chartType: string;
            upperLimit: string | null;
            lowerLimit: string | null;
            dictTypeId: number;
            treeId: number | null;
            createBy: string;
            updateBy: string | null;
            remark: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateDictDataDto: {
            id: number;
            /**
             * @description 字典数据名称
             * @example 性别
             */
            name?: string;
            /**
             * @description 字典数据值
             * @example 1
             */
            value?: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 类型 0: 配置 1: 参数 2: 诊断
             * @example 0
             */
            type?: string;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 字典类型ID
             * @example 1
             */
            dictTypeId?: number;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 父级菜单id
             * @example 0
             */
            parentId?: number;
        };
        CreateDictTypeDto: {
            /**
             * @description 字典名称
             * @example 性别
             */
            name: string;
            /**
             * @description 字典值
             * @example 1
             */
            value: string;
            /**
             * @description 状态
             * @example true
             */
            status?: boolean;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
        };
        DictTypeEntity: {
            id: number;
            name: string;
            value: string;
            status: boolean;
            createBy: string;
            updateBy: string | null;
            remark: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdateDictTypeDto: {
            id: number;
            /**
             * @description 字典名称
             * @example 性别
             */
            name?: string;
            /**
             * @description 字典值
             * @example 1
             */
            value?: string;
            /**
             * @description 状态
             * @example true
             */
            status?: boolean;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
        };
        CreateMenuDto: {
            /**
             * @description 菜单类别
             * @example menu
             * @enum {string}
             */
            type: "catalog" | "menu" | "embedded" | "link" | "button";
            /**
             * @description 菜单名称
             * @example 系统管理
             */
            name: string;
            /**
             * @description 菜单路径
             * @example /system
             */
            path?: string;
            /**
             * @description 菜单标题 (配置页面的标题,配合国际化使用)
             * @example "system.title
             */
            title?: string;
            /**
             * @description 菜单图标
             * @example i-line-md:external-link
             */
            icon?: string;
            /**
             * @description 激活菜单图标
             * @example i-line-md:external-link
             */
            actionIcon?: string;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 作为路由时，需要激活的菜单的Path
             * @example /system
             */
            activePath?: string;
            /**
             * @description 固定在标签栏
             * @default true
             * @example true
             */
            affixTab: boolean;
            /**
             * @description 在标签栏固定的顺序
             * @default 1
             * @example 1
             */
            affixTabOrder: number;
            /**
             * @description 徽标内容 (当徽标类型为normal时有效)
             * @example new
             */
            badge?: string;
            /**
             * @description 徽标类型
             * @example dot
             */
            badgeType?: Record<string, never>;
            /**
             * @description 徽标颜色
             * @example default
             */
            badgeVariants?: Record<string, never>;
            /**
             * @description 在菜单中隐藏下级
             * @default false
             * @example false
             */
            hideChildrenInMenu: boolean;
            /**
             * @description 在面包屑中隐藏
             * @default false
             * @example false
             */
            hideInBreadcrumb: boolean;
            /**
             * @description 在菜单中隐藏
             * @default false
             * @example false
             */
            hideInMenu: boolean;
            /**
             * @description 在标签栏中隐藏
             * @default false
             * @example false
             */
            hideInTab: boolean;
            /**
             * @description 内嵌Iframe的URL
             * @example www.example.com
             */
            iframeSrc?: string;
            /**
             * @description 外链页面的URL
             * @example www.example.com
             */
            link?: string;
            /**
             * @description 是否缓存页面
             * @default false
             * @example false
             */
            keepAlive: boolean;
            /**
             * @description 同一个路由最大打开的标签数
             * @default 1
             * @example 1
             */
            maxNumOfOpenTabs: number;
            /**
             * @description 无需基础布局
             * @default false
             * @example false
             */
            noBasicLayout: boolean;
            /**
             * @description 是否在新窗口打开
             * @default false
             * @example false
             */
            openInNewWindow: boolean;
            /**
             * @description 额外的路由参数
             * @example /:id
             */
            query?: string;
            /**
             * @description 重定向
             * @example /system
             */
            redirect?: string;
            /**
             * @description 排序
             * @default 1
             * @example 1
             */
            order: number;
            /**
             * @description 权限标识
             * @example system:menu:list
             */
            permission?: string;
            /**
             * @description 父级菜单id
             * @example 0
             */
            parentId?: number;
        };
        MenuEntity: {
            /** @enum {string} */
            type: "catalog" | "menu" | "embedded" | "link" | "button";
            /** @enum {string|null} */
            badgeType: "dot" | "normal" | null;
            /** @enum {string|null} */
            badgeVariants: "default" | "success" | "error" | "warning" | "info" | null;
            id: number;
            name: string;
            title: string | null;
            path: string;
            icon: string | null;
            activeIcon: string | null;
            status: boolean;
            activePath: string | null;
            affixTab: boolean;
            affixTabOrder: number;
            badge: string | null;
            hideChildrenInMenu: boolean;
            hideInMenu: boolean;
            hideInBreadcrumb: boolean;
            hideInTab: boolean;
            iframeSrc: string | null;
            link: string | null;
            keepAlive: boolean;
            maxNumOfOpenTabs: number | null;
            noBasicLayout: boolean;
            openInNewWindow: boolean;
            query: string | null;
            redirect: string | null;
            order: number;
            parentId: number | null;
            children?: components["schemas"]["MenuEntity"][] | null;
            permission: string;
        };
        UpdateMenuDto: {
            /**
             * @description 菜单类别
             * @example menu
             * @enum {string}
             */
            type?: "catalog" | "menu" | "embedded" | "link" | "button";
            id: number;
            /**
             * @description 菜单名称
             * @example 系统管理
             */
            name?: string;
            /**
             * @description 菜单路径
             * @example /system
             */
            path?: string;
            /**
             * @description 菜单标题 (配置页面的标题,配合国际化使用)
             * @example "system.title
             */
            title?: string;
            /**
             * @description 菜单图标
             * @example i-line-md:external-link
             */
            icon?: string;
            /**
             * @description 激活菜单图标
             * @example i-line-md:external-link
             */
            actionIcon?: string;
            /**
             * @description 状态 false: 禁用 true: 启用
             * @default true
             * @example true
             */
            status: boolean;
            /**
             * @description 作为路由时，需要激活的菜单的Path
             * @example /system
             */
            activePath?: string;
            /**
             * @description 固定在标签栏
             * @default true
             * @example true
             */
            affixTab: boolean;
            /**
             * @description 在标签栏固定的顺序
             * @default 1
             * @example 1
             */
            affixTabOrder: number;
            /**
             * @description 徽标内容 (当徽标类型为normal时有效)
             * @example new
             */
            badge?: string;
            /**
             * @description 徽标类型
             * @example dot
             */
            badgeType?: Record<string, never>;
            /**
             * @description 徽标颜色
             * @example default
             */
            badgeVariants?: Record<string, never>;
            /**
             * @description 在菜单中隐藏下级
             * @default false
             * @example false
             */
            hideChildrenInMenu: boolean;
            /**
             * @description 在面包屑中隐藏
             * @default false
             * @example false
             */
            hideInBreadcrumb: boolean;
            /**
             * @description 在菜单中隐藏
             * @default false
             * @example false
             */
            hideInMenu: boolean;
            /**
             * @description 在标签栏中隐藏
             * @default false
             * @example false
             */
            hideInTab: boolean;
            /**
             * @description 内嵌Iframe的URL
             * @example www.example.com
             */
            iframeSrc?: string;
            /**
             * @description 外链页面的URL
             * @example www.example.com
             */
            link?: string;
            /**
             * @description 是否缓存页面
             * @default false
             * @example false
             */
            keepAlive: boolean;
            /**
             * @description 同一个路由最大打开的标签数
             * @default 1
             * @example 1
             */
            maxNumOfOpenTabs: number;
            /**
             * @description 无需基础布局
             * @default false
             * @example false
             */
            noBasicLayout: boolean;
            /**
             * @description 是否在新窗口打开
             * @default false
             * @example false
             */
            openInNewWindow: boolean;
            /**
             * @description 额外的路由参数
             * @example /:id
             */
            query?: string;
            /**
             * @description 重定向
             * @example /system
             */
            redirect?: string;
            /**
             * @description 排序
             * @default 1
             * @example 1
             */
            order: number;
            /**
             * @description 权限标识
             * @example system:menu:list
             */
            permission?: string;
            /**
             * @description 父级菜单id
             * @example 0
             */
            parentId?: number;
        };
        CreateRoleDto: {
            /**
             * @description 权限名称
             * @example 管理员
             */
            name: string;
            /**
             * @description 权限值
             * @example admin
             */
            value: string;
            /**
             * @description 排序
             * @default 0
             * @example 0
             */
            order: number;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 菜单ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            menuIds: number[];
        };
        UpdateRoleDto: {
            id: number;
            /**
             * @description 权限名称
             * @example 管理员
             */
            name?: string;
            /**
             * @description 权限值
             * @example admin
             */
            value?: string;
            /**
             * @description 排序
             * @default 0
             * @example 0
             */
            order: number;
            /**
             * @description 备注
             * @example 备注
             */
            remark?: string;
            /**
             * @description 菜单ID
             * @example [
             *       1,
             *       2
             *     ]
             */
            menuIds?: number[];
        };
        CreatePostDto: {
            /**
             * @description 岗位编码
             * @example tech
             */
            code: string;
            /**
             * @description 岗位名称
             * @example 技术部
             */
            name: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 备注
             * @example 这是一个技术部
             */
            remark?: string;
        };
        PostEntity: {
            id: number;
            code: string;
            name: string;
            order: number;
            remark: string;
            createBy: string;
            updateBy: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UpdatePostDto: {
            id: number;
            /**
             * @description 岗位编码
             * @example tech
             */
            code?: string;
            /**
             * @description 岗位名称
             * @example 技术部
             */
            name?: string;
            /**
             * @description 排序
             * @example 1
             */
            order?: number;
            /**
             * @description 备注
             * @example 这是一个技术部
             */
            remark?: string;
        };
        OperationLogEntity: {
            id: number;
            title: string;
            businessType: number;
            module: string;
            username: string;
            ip: string;
            address: string;
            /** Format: date-time */
            createdAt: string;
        };
        LoginLogEntity: {
            id: number;
            username: string;
            status: boolean;
            ip: string;
            address: string;
            browser: string;
            os: string;
            message: string;
            /** Format: date-time */
            loginTime: string;
            /** Format: date-time */
            createdAt: string;
        };
        InfoEntity: {
            cpu: {
                cores: number;
                brand: string;
                manufacturer: string;
                speed: string;
            };
            memory: {
                total: string;
                free: string;
                used: string;
                usage: string;
            };
            osInfo: {
                platform: string;
                release: string;
                arch: string;
                hostname: string;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthenticationController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthenticationController_signIn: {
        parameters: {
            query?: never;
            header: {
                "X-Real-IP": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignInEntity"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthenticationController_refreshTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FactoryController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    FactoryController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFactoryDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    FactoryController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    FactoryController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    FactoryController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFactoryDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UnitController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UnitController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUnitDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UnitController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UnitController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UnitController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUnitDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ValveController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ValveController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateValveDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ValveController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ValveController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    ValveController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateValveDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AnalysisTaskController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AnalysisTaskController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAnalysisTaskDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AnalysisTaskController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AnalysisTaskController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AnalysisTaskController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAnalysisTaskDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UserController_findAll: {
        parameters: {
            query?: {
                /** @description 账号 */
                username?: string;
                /** @description 昵称 */
                nickname?: string;
                /** @description 邮箱 */
                email?: string;
                /** @description 手机号 */
                phoneNumber?: string;
                /** @description 性别 0: 女 1: 男 */
                sex?: number;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["UserEntity"][];
                    };
                };
            };
        };
    };
    UserController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_findSelf: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_findSelfCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    UserController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_remove: {
        parameters: {
            query?: never;
            header: {
                "X-Real-IP": string;
            };
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    UserController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    DeptController_findAll: {
        parameters: {
            query?: {
                /** @description 部门名称 */
                name?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeptEntity"][];
                };
            };
        };
    };
    DeptController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDeptDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeptEntity"];
                };
            };
        };
    };
    DeptController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeptEntity"];
                };
            };
        };
    };
    DeptController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DeptController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDeptDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeptEntity"];
                };
            };
        };
    };
    DictDataController_findAll: {
        parameters: {
            query?: {
                /** @description 字典类型值 */
                dictTypeValue?: string;
                /** @description 字典数据名称 */
                name?: string;
                /** @description 字典数据值 */
                value?: string;
                /** @description 字典类型ID */
                dictTypeId?: number;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["DictDataEntity"][];
                    };
                };
            };
        };
    };
    DictDataController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDictDataDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictDataEntity"];
                };
            };
        };
    };
    DictDataController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictDataEntity"];
                };
            };
        };
    };
    DictDataController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DictDataController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDictDataDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictDataEntity"];
                };
            };
        };
    };
    DictTypeController_findAll: {
        parameters: {
            query?: {
                /** @description 字典名称 */
                name?: string;
                /** @description 字典值 */
                value?: string;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["DictTypeEntity"][];
                    };
                };
            };
        };
    };
    DictTypeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDictTypeDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictTypeEntity"];
                };
            };
        };
    };
    DictTypeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictTypeEntity"];
                };
            };
        };
    };
    DictTypeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DictTypeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDictTypeDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DictTypeEntity"];
                };
            };
        };
    };
    MenuController_findAll: {
        parameters: {
            query?: {
                /** @description 菜单名称 */
                name?: string;
                /** @description 菜单路径 */
                path?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuEntity"][];
                };
            };
        };
    };
    MenuController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMenuDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuEntity"];
                };
            };
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuEntity"];
                };
            };
        };
    };
    MenuController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MenuController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMenuDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MenuEntity"];
                };
            };
        };
    };
    RoleController_findAll: {
        parameters: {
            query?: {
                /** @description 权限名称 */
                name?: string;
                /** @description 权限值 */
                value?: string;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["RoleEntity"][];
                    };
                };
            };
        };
    };
    RoleController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoleDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleEntity"];
                };
            };
        };
    };
    RoleController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleEntity"];
                };
            };
        };
    };
    RoleController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoleController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoleDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleEntity"];
                };
            };
        };
    };
    PostController_findAll: {
        parameters: {
            query?: {
                /** @description 岗位名称 */
                name?: string;
                /** @description 岗位编码 */
                code?: string;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["PostEntity"][];
                    };
                };
            };
        };
    };
    PostController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostDto"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostEntity"];
                };
            };
        };
    };
    PostController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostEntity"];
                };
            };
        };
    };
    PostController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostEntity"];
                };
            };
        };
    };
    OperationLogController_findAll: {
        parameters: {
            query?: {
                username?: string;
                businessType?: number;
                module?: string;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["OperationLogEntity"][];
                    };
                };
            };
        };
    };
    OperationLogController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OperationLogEntity"];
                };
            };
        };
    };
    LoginLogController_findAll: {
        parameters: {
            query?: {
                username?: string;
                /** @description 页码 */
                page?: number;
                /** @description 每页数量 */
                pageSize?: number;
                /** @description 开始时间 */
                beginTime?: string;
                /** @description 结束时间 */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginateResponse"] & {
                        rows?: components["schemas"]["LoginLogEntity"][];
                    };
                };
            };
        };
    };
    LoginLogController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginLogEntity"];
                };
            };
        };
    };
    InfoController_systemInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InfoEntity"];
                };
            };
        };
    };
}
