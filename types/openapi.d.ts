/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/auth/authentication/sign-up': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 注册 */
    post: operations['AuthenticationController_signUp']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/authentication/sign-in': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 登录 */
    post: operations['AuthenticationController_signIn']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/auth/authentication/refresh-token': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 刷新令牌 */
    post: operations['AuthenticationController_refreshTokens']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取用户列表 */
    get: operations['UserController_findWithPagination']
    put?: never
    /** 创建用户 */
    post: operations['UserController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取所有用户列表 */
    get: operations['UserController_findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取当前登录用户信息 */
    get: operations['UserController_findSelf']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/code': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取当前登录用户权限码 */
    get: operations['UserController_findSelfCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/user/changePassword': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 修改密码 */
    patch: operations['UserController_changePassword']
    trace?: never
  }
  '/api/system/user/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取单个用户信息 */
    get: operations['UserController_findOne']
    put?: never
    post?: never
    /** 删除用户 */
    delete: operations['UserController_remove']
    options?: never
    head?: never
    /** 更新用户 */
    patch: operations['UserController_update']
    trace?: never
  }
  '/api/system/dept': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取部门列表 */
    get: operations['DeptController_findAll']
    put?: never
    /** 创建部门 */
    post: operations['DeptController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dept/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取部门详情 */
    get: operations['DeptController_findOne']
    put?: never
    post?: never
    /** 删除部门 */
    delete: operations['DeptController_remove']
    options?: never
    head?: never
    /** 更新部门 */
    patch: operations['DeptController_update']
    trace?: never
  }
  '/api/system/dict': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典列表 */
    get: operations['DictController_findAll']
    put?: never
    /** 创建字典 */
    post: operations['DictController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dict/data': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典数据列表 */
    get: operations['DictController_findAllData']
    put?: never
    /** 创建字典数据 */
    post: operations['DictController_createData']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/dict/data/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典数据详情 */
    get: operations['DictController_findOneData']
    put?: never
    post?: never
    /** 删除字典数据 */
    delete: operations['DictController_removeData']
    options?: never
    head?: never
    /** 更新字典数据 */
    patch: operations['DictController_updateData']
    trace?: never
  }
  '/api/system/dict/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取字典详情 */
    get: operations['DictController_findOne']
    put?: never
    post?: never
    /** 删除字典 */
    delete: operations['DictController_remove']
    options?: never
    head?: never
    /** 更新字典 */
    patch: operations['DictController_update']
    trace?: never
  }
  '/api/system/menu': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取菜单列表 */
    get: operations['MenuController_findAll']
    put?: never
    /** 创建菜单 */
    post: operations['MenuController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/menu/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取菜单详情 */
    get: operations['MenuController_findOne']
    put?: never
    post?: never
    /** 删除菜单 */
    delete: operations['MenuController_remove']
    options?: never
    head?: never
    /** 更新菜单 */
    patch: operations['MenuController_update']
    trace?: never
  }
  '/api/system/role': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取权限列表 */
    get: operations['RoleController_findAll']
    put?: never
    /** 创建权限 */
    post: operations['RoleController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/role/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取权限详情 */
    get: operations['RoleController_findOne']
    put?: never
    post?: never
    /** 删除权限 */
    delete: operations['RoleController_remove']
    options?: never
    head?: never
    /** 更新权限 */
    patch: operations['RoleController_update']
    trace?: never
  }
  '/api/system/post': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取岗位列表 */
    get: operations['PostController_findAll']
    put?: never
    /** 创建岗位 */
    post: operations['PostController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/system/post/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取岗位详情 */
    get: operations['PostController_findOne']
    put?: never
    post?: never
    /** 删除岗位 */
    delete: operations['PostController_remove']
    options?: never
    head?: never
    /** 更新岗位 */
    patch: operations['PostController_update']
    trace?: never
  }
  '/api/monitor/operation-log': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取操作日志列表 */
    get: operations['OperationLogController_findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/operation-log/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取操作日志详情 */
    get: operations['OperationLogController_findOne']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/login-log': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取登录日志列表 */
    get: operations['LoginLogController_findAll']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/login-log/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取登录日志详情 */
    get: operations['LoginLogController_findOne']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/monitor/info': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 运行信息 */
    get: operations['InfoController_systemInfo']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/knowledge-base': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取知识库列表 */
    get: operations['KnowledgeBaseController_findAll']
    put?: never
    /** 创建知识库 */
    post: operations['KnowledgeBaseController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/knowledge-base/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取知识库详情 */
    get: operations['KnowledgeBaseController_findOne']
    put?: never
    post?: never
    /** 删除知识库 */
    delete: operations['KnowledgeBaseController_remove']
    options?: never
    head?: never
    /** 更新知识库 */
    patch: operations['KnowledgeBaseController_update']
    trace?: never
  }
  '/api/knowledge-base/{id}/documents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取知识库文件列表 */
    get: operations['KnowledgeBaseController_findAllDocument']
    put?: never
    /** 上传文件到指定知识库 */
    post: operations['KnowledgeBaseController_uploadDocument']
    /** 删除知识库文件 */
    delete: operations['KnowledgeBaseController_removeDocument']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/knowledge-base/{id}/documents/{document_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 下载知识库文件 */
    get: operations['KnowledgeBaseController_downloadDocument']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** 更新知识库文件 */
    patch: operations['KnowledgeBaseController_updateDocument']
    trace?: never
  }
  '/api/knowledge-base/{id}/parse': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** 解析指定知识库中的文件 */
    post: operations['KnowledgeBaseController_parseChunks']
    /** 停止解析指定知识库中的文件 */
    delete: operations['KnowledgeBaseController_stopParseChunks']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/assistant': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取聊天助手列表 */
    get: operations['AssistantController_findAll']
    put?: never
    /** 创建聊天助手 */
    post: operations['AssistantController_create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/assistant/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** 获取聊天助手详情 */
    get: operations['AssistantController_findOne']
    put?: never
    post?: never
    delete: operations['AssistantController_remove']
    options?: never
    head?: never
    /** 更新聊天助手 */
    patch: operations['AssistantController_update']
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    SignUpDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
    }
    SignInDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
    }
    SignInEntity: {
      accessToken: string
      refreshToken: string
    }
    RefreshTokenDto: {
      refreshToken: string
    }
    CreateUserDto: {
      /**
       * @description 账号
       * @example admin
       */
      username: string
      /**
       * @description 密码
       * @example 123456
       */
      password: string
      /**
       * @description 是否是部门管理员
       * @default false
       * @example true
       */
      isDeptAdmin: boolean
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * Format: uri
       * @description 头像
       * @example http://xxx.com/xxx.jpg
       */
      avatar?: string
      /**
       * Format: email
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /**
       * @description 手机号
       * @example 18888888888
       */
      phoneNumber?: string
      /**
       * @description 性别 0: 女 1: 男
       * @default 1
       * @example 1
       */
      sex: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 岗位ID
       * @example 1
       */
      postId?: number
      /**
       * @description 部门ID
       * @example 1
       */
      deptId?: number
      /**
       * @description 角色ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      roleIds?: number[]
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    RoleEntity: {
      id: number
      name: string
      value: string
      order: number
      status: boolean
      remark: string
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UserEntity: {
      id: number
      isAdmin: boolean
      isDeptAdmin: boolean
      username: string
      nickname: string
      avatar: string
      email: string
      phoneNumber: string
      sex: number
      status: boolean
      deptId: number | null
      createBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      remark: string
      roles: components['schemas']['RoleEntity'][]
      roleIds: number[]
    }
    PaginateResponse: {
      /**
       * @description 页码
       * @default 1
       * @example 1
       */
      current: number
      /**
       * @description 每页数量
       * @default 10
       * @example 10
       */
      pageSize: number
    }
    ChangePasswordDto: {
      id: number
      /** @default  */
      oldPassword: string
      password: string
    }
    UpdateUserDto: {
      id: number
      /**
       * @description 账号
       * @example admin
       */
      username?: string
      /**
       * @description 密码
       * @example 123456
       */
      password?: string
      /**
       * @description 是否是部门管理员
       * @default false
       * @example true
       */
      isDeptAdmin: boolean
      /**
       * @description 昵称
       * @example 管理员
       */
      nickname?: string
      /**
       * Format: uri
       * @description 头像
       * @example http://xxx.com/xxx.jpg
       */
      avatar?: string
      /**
       * Format: email
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /**
       * @description 手机号
       * @example 18888888888
       */
      phoneNumber?: string
      /**
       * @description 性别 0: 女 1: 男
       * @default 1
       * @example 1
       */
      sex: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 岗位ID
       * @example 1
       */
      postId?: number
      /**
       * @description 部门ID
       * @example 1
       */
      deptId?: number
      /**
       * @description 角色ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      roleIds?: number[]
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    CreateDeptDto: {
      /**
       * @description 部门名称
       * @example 技术部
       */
      name: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 负责人id
       * @example 1
       */
      leaderId: number
      /**
       * @description 负责人电话
       * @example 13000000000
       */
      phone?: string
      /**
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /** @description 上级部门ID */
      parentId?: number
    }
    DeptEntity: {
      id: number
      name: string
      order: number
      leader: string | null
      leaderId: number | null
      phone: string
      email: string
      parentId: number | null
      children?: components['schemas']['DeptEntity'][] | null
      createBy: string
      updateBy: string | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateDeptDto: {
      id: number
      /**
       * @description 部门名称
       * @example 技术部
       */
      name?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 负责人id
       * @example 1
       */
      leaderId?: number
      /**
       * @description 负责人电话
       * @example 13000000000
       */
      phone?: string
      /**
       * @description 邮箱
       * @example xxx@qq.com
       */
      email?: string
      /** @description 上级部门ID */
      parentId?: number
    }
    CreateDictDto: {
      /**
       * @description 字典名称
       * @example 性别
       */
      name: string
      /**
       * @description 字典值
       * @example 1
       */
      value: string
      /**
       * @description 状态
       * @example true
       */
      status?: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    DictEntity: {
      id: number
      name: string
      value: string
      status: boolean
      createBy: string
      updateBy: string | null
      remark: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    CreateDictDataDto: {
      /**
       * @description 字典数据名称
       * @example 性别
       */
      name: string
      /**
       * @description 字典数据值
       * @example 1
       */
      value: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 字典ID
       * @example 1
       */
      dictId: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    DictDataEntity: {
      id: number
      name: string
      value: string
      order: number
      status: boolean
      dictId: number
      createBy: string
      updateBy: string | null
      remark: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateDictDataDto: {
      id: number
      /**
       * @description 字典数据名称
       * @example 性别
       */
      name?: string
      /**
       * @description 字典数据值
       * @example 1
       */
      value?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 字典ID
       * @example 1
       */
      dictId?: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    UpdateDictDto: {
      id: number
      /**
       * @description 字典名称
       * @example 性别
       */
      name?: string
      /**
       * @description 字典值
       * @example 1
       */
      value?: string
      /**
       * @description 状态
       * @example true
       */
      status?: boolean
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
    }
    CreateMenuDto: {
      /**
       * @description 菜单类别
       * @example menu
       * @enum {string}
       */
      type: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      /**
       * @description 菜单名称
       * @example 系统管理
       */
      name: string
      /**
       * @description 菜单路径
       * @example /system
       */
      path?: string
      /**
       * @description 菜单标题 (配置页面的标题,配合国际化使用)
       * @example "system.title
       */
      title?: string
      /**
       * @description 菜单图标
       * @example i-line-md:external-link
       */
      icon?: string
      /**
       * @description 激活菜单图标
       * @example i-line-md:external-link
       */
      activeIcon?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 作为路由时，需要激活的菜单的Path
       * @example /system
       */
      activePath?: string
      /**
       * @description 固定在标签栏
       * @default true
       * @example true
       */
      affixTab: boolean
      /**
       * @description 在标签栏固定的顺序
       * @default 1
       * @example 1
       */
      affixTabOrder: number
      /**
       * @description 徽标内容 (当徽标类型为normal时有效)
       * @example new
       */
      badge?: string
      /**
       * @description 徽标类型
       * @example dot
       */
      badgeType?: Record<string, never>
      /**
       * @description 徽标颜色
       * @example default
       */
      badgeVariants?: Record<string, never>
      /**
       * @description 在菜单中隐藏下级
       * @default false
       * @example false
       */
      hideChildrenInMenu: boolean
      /**
       * @description 在面包屑中隐藏
       * @default false
       * @example false
       */
      hideInBreadcrumb: boolean
      /**
       * @description 在菜单中隐藏
       * @default false
       * @example false
       */
      hideInMenu: boolean
      /**
       * @description 在标签栏中隐藏
       * @default false
       * @example false
       */
      hideInTab: boolean
      /**
       * @description 内嵌Iframe的URL
       * @example www.example.com
       */
      iframeSrc?: string
      /**
       * @description 外链页面的URL
       * @example www.example.com
       */
      link?: string
      /**
       * @description 是否缓存页面
       * @default false
       * @example false
       */
      keepAlive: boolean
      /**
       * @description 同一个路由最大打开的标签数
       * @default 1
       * @example 1
       */
      maxNumOfOpenTabs: number
      /**
       * @description 无需基础布局
       * @default false
       * @example false
       */
      noBasicLayout: boolean
      /**
       * @description 是否在新窗口打开
       * @default false
       * @example false
       */
      openInNewWindow: boolean
      /**
       * @description 额外的路由参数
       * @example /:id
       */
      query?: string
      /**
       * @description 重定向
       * @example /system
       */
      redirect?: string
      /**
       * @description 排序
       * @default 1
       * @example 1
       */
      order: number
      /**
       * @description 权限标识
       * @example system:menu:list
       */
      permission?: string
      /**
       * @description 父级菜单id
       * @example 0
       */
      parentId?: number
    }
    MenuEntity: {
      /** @enum {string} */
      type: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      /** @enum {string|null} */
      badgeType: 'dot' | 'normal' | null
      /** @enum {string|null} */
      badgeVariants: 'default' | 'success' | 'error' | 'warning' | 'info' | null
      id: number
      name: string
      title: string | null
      path: string
      icon: string | null
      activeIcon: string | null
      status: boolean
      activePath: string | null
      affixTab: boolean
      affixTabOrder: number
      badge: string | null
      hideChildrenInMenu: boolean
      hideInMenu: boolean
      hideInBreadcrumb: boolean
      hideInTab: boolean
      iframeSrc: string | null
      link: string | null
      keepAlive: boolean
      maxNumOfOpenTabs: number | null
      noBasicLayout: boolean
      openInNewWindow: boolean
      query: string | null
      redirect: string | null
      order: number
      parentId: number | null
      children?: components['schemas']['MenuEntity'][] | null
      permission: string
    }
    UpdateMenuDto: {
      /**
       * @description 菜单类别
       * @example menu
       * @enum {string}
       */
      type?: 'catalog' | 'menu' | 'embedded' | 'link' | 'button'
      id: number
      /**
       * @description 菜单名称
       * @example 系统管理
       */
      name: string
      /**
       * @description 菜单路径
       * @example /system
       */
      path?: string
      /**
       * @description 菜单标题 (配置页面的标题,配合国际化使用)
       * @example "system.title
       */
      title?: string
      /**
       * @description 菜单图标
       * @example i-line-md:external-link
       */
      icon?: string
      /**
       * @description 激活菜单图标
       * @example i-line-md:external-link
       */
      activeIcon?: string
      /**
       * @description 状态 false: 禁用 true: 启用
       * @default true
       * @example true
       */
      status: boolean
      /**
       * @description 作为路由时，需要激活的菜单的Path
       * @example /system
       */
      activePath?: string
      /**
       * @description 固定在标签栏
       * @default true
       * @example true
       */
      affixTab: boolean
      /**
       * @description 在标签栏固定的顺序
       * @default 1
       * @example 1
       */
      affixTabOrder: number
      /**
       * @description 徽标内容 (当徽标类型为normal时有效)
       * @example new
       */
      badge?: string
      /**
       * @description 徽标类型
       * @example dot
       */
      badgeType?: Record<string, never>
      /**
       * @description 徽标颜色
       * @example default
       */
      badgeVariants?: Record<string, never>
      /**
       * @description 在菜单中隐藏下级
       * @default false
       * @example false
       */
      hideChildrenInMenu: boolean
      /**
       * @description 在面包屑中隐藏
       * @default false
       * @example false
       */
      hideInBreadcrumb: boolean
      /**
       * @description 在菜单中隐藏
       * @default false
       * @example false
       */
      hideInMenu: boolean
      /**
       * @description 在标签栏中隐藏
       * @default false
       * @example false
       */
      hideInTab: boolean
      /**
       * @description 内嵌Iframe的URL
       * @example www.example.com
       */
      iframeSrc?: string
      /**
       * @description 外链页面的URL
       * @example www.example.com
       */
      link?: string
      /**
       * @description 是否缓存页面
       * @default false
       * @example false
       */
      keepAlive: boolean
      /**
       * @description 同一个路由最大打开的标签数
       * @default 1
       * @example 1
       */
      maxNumOfOpenTabs: number
      /**
       * @description 无需基础布局
       * @default false
       * @example false
       */
      noBasicLayout: boolean
      /**
       * @description 是否在新窗口打开
       * @default false
       * @example false
       */
      openInNewWindow: boolean
      /**
       * @description 额外的路由参数
       * @example /:id
       */
      query?: string
      /**
       * @description 重定向
       * @example /system
       */
      redirect?: string
      /**
       * @description 排序
       * @default 1
       * @example 1
       */
      order: number
      /**
       * @description 权限标识
       * @example system:menu:list
       */
      permission?: string
      /**
       * @description 父级菜单id
       * @example 0
       */
      parentId?: number
    }
    CreateRoleDto: {
      /**
       * @description 权限名称
       * @example 管理员
       */
      name: string
      /**
       * @description 权限值
       * @example admin
       */
      value: string
      /**
       * @description 排序
       * @default 0
       * @example 0
       */
      order: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds: number[]
    }
    UpdateRoleDto: {
      id: number
      /**
       * @description 权限名称
       * @example 管理员
       */
      name?: string
      /**
       * @description 权限值
       * @example admin
       */
      value?: string
      /**
       * @description 排序
       * @default 0
       * @example 0
       */
      order: number
      /**
       * @description 备注
       * @example 备注
       */
      remark?: string
      /**
       * @description 菜单ID
       * @example [
       *       1,
       *       2
       *     ]
       */
      menuIds?: number[]
    }
    CreatePostDto: {
      /**
       * @description 岗位编码
       * @example tech
       */
      code: string
      /**
       * @description 岗位名称
       * @example 技术部
       */
      name: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 备注
       * @example 这是一个技术部
       */
      remark?: string
    }
    PostEntity: {
      id: number
      code: string
      name: string
      order: number
      remark: string
      createBy: string
      updateBy: string
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdatePostDto: {
      id: number
      /**
       * @description 岗位编码
       * @example tech
       */
      code?: string
      /**
       * @description 岗位名称
       * @example 技术部
       */
      name?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 备注
       * @example 这是一个技术部
       */
      remark?: string
    }
    OperationLogEntity: {
      id: number
      title: string
      businessType: number
      module: string
      username: string
      ip: string
      address: string
      /** Format: date-time */
      createdAt: string
    }
    LoginLogEntity: {
      id: number
      username: string
      status: boolean
      ip: string
      address: string
      browser: string
      os: string
      message: string
      /** Format: date-time */
      loginTime: string
      /** Format: date-time */
      createdAt: string
    }
    InfoEntity: {
      cpu: {
        cores: number
        brand: string
        manufacturer: string
        speed: string
      }
      memory: {
        total: string
        free: string
        used: string
        usage: string
      }
      osInfo: {
        platform: string
        release: string
        arch: string
        hostname: string
      }
    }
    CreateKnowledgeBaseDto: {
      /**
       * @description 知识库名称
       * @example 知识库1
       */
      name: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 知识库头像
       * @example https://example.com/avatar.png
       */
      avatar?: string
      /**
       * @description 描述
       * @default
       * @example 这是一个知识库
       */
      description: string
      /**
       * @description 嵌入模型
       * @default text-embedding-v4@Tongyi-Qianwen
       * @example text-embedding-ada-002
       */
      embedding_model: string
      /**
       * @description 权限标识
       * @example "me" | "team
       */
      permission?: string
      /**
       * @description 解析方法
       * @default naive
       * @example naive
       */
      chunk_method: string
    }
    KnowledgeBaseEntity: {
      id: number
      name: string
      avatar: string
      description: string
      embedding_model: string
      permission: string
      chunk_method: string
      parser_config: string
      datasetId: string | null
      deptId: number | null
      order: number
      createBy: string
      updateBy: string | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
    }
    UpdateKnowledgeBaseDto: {
      id: number
      /**
       * @description 知识库名称
       * @example 知识库1
       */
      name?: string
      /**
       * @description 排序
       * @example 1
       */
      order?: number
      /**
       * @description 知识库头像
       * @example https://example.com/avatar.png
       */
      avatar?: string
      /**
       * @description 描述
       * @default
       * @example 这是一个知识库
       */
      description: string
      /**
       * @description 权限标识
       * @example "me" | "team
       */
      permission?: string
      /**
       * @description 解析方法
       * @default naive
       * @example naive
       */
      chunk_method: string
    }
    DocumentEntity: {
      id: string
      chunk_num: number
      create_date: string
      create_time: number
      created_by: string
      kb_id: string
      location: string
      meta_fields: Record<string, never>
      name: string
      parser_config: {
        auto_keywords: number
        auto_questions: number
        chunk_token_num: number
        delimiter: string
        graphrag: {
          use_graphrag?: boolean
        }
        html4excel: boolean
        layout_recognize: string
        raptor: {
          use_raptor?: boolean
        }
        topn_tags: number
      }
      parser_id: string
      process_begin_at: string | null
      process_duration: number
      progress: number
      progress_msg: string
      run: string
      size: number
      source_type: string
      status: string
      suffix: string
      thumbnail: string
      token_num: number
      type: string
      update_date: string
      update_time: number
    }
    UploadDto: {
      files: string[]
    }
    UpdateDocumentDto: {
      /**
       * @description 文档名称
       * @example 文档1
       */
      name?: string
      /**
       * @description 解析方法
       * @default naive
       * @example naive
       */
      chunk_method: string
    }
    DeleteDocumentDto: {
      /**
       * @description 文件ID
       * @example [
       *       "78e5ae6691db11f084d3fa341edb7c4d",
       *       "78e5ae6691db11f084d3fa341edb7c4e"
       *     ]
       */
      document_ids: string[]
    }
    ParseDocumentDto: {
      /**
       * @description 文件ID
       * @example [
       *       "78e5ae6691db11f084d3fa341edb7c4d",
       *       "78e5ae6691db11f084d3fa341edb7c4e"
       *     ]
       */
      document_ids: string[]
    }
    CreateAssistantDto: {
      /**
       * @description 助手名称
       * @example 助手1
       */
      name: string
      /**
       * @description 助手头像
       * @example https://example.com/avatar.png
       */
      avatar?: string
      /**
       * @description LLM
       * @default deepseek-r1@Tongyi-Qianwen
       * @example gpt-3.5-turbo
       */
      model_name: string
      /**
       * @description 温度
       * @default 0.1
       * @example 0.7
       */
      temperature: number
      /**
       * @description 最大生成长度
       * @default 512
       * @example 512
       */
      max_tokens: number
      /**
       * @description 核心采样
       * @default 0.3
       * @example 0.3
       */
      top_p: number
      /**
       * @description 存在惩罚
       * @default 0.4
       * @example 0.4
       */
      presence_penalty: number
      /**
       * @description 频率惩罚
       * @default 0.7
       * @example 0.7
       */
      frequency_penalty: number
      /**
       * @description 加权关键字相似度
       * @default 0.2
       * @example 0.2
       */
      similarity_threshold: number
      /**
       * @description 关键词相似度权重
       * @default 0.7
       * @example 0.7
       */
      keywords_similarity_weight: number
      /**
       * @description 生成的回复数量
       * @default 6
       * @example 6
       */
      top_n: number
      /**
       * @description 重新排序或选择前 k 个项目
       * @default 1024
       * @example 1024
       */
      top_k: number
      /**
       * @description 空响应返回内容
       * @example 无
       */
      empty_response?: string
      /**
       * @description 开场问候语
       * @example 你好，我是你的助手。
       */
      opener?: string
      /**
       * @description 提示词模板
       * @example <prompt>
       */
      prompt?: string
    }
    AssistantEntity: {
      id: number
      name: string
      avatar: string | null
      model_name: string
      temperature: number
      top_p: number
      presence_penalty: number
      frequency_penalty: number
      similarity_threshold: number
      keywords_similarity_weight: number
      top_n: number
      top_k: number
      empty_response: string | null
      opener: string | null
      prompt: string | null
      assistantId: string | null
      max_tokens: number
      description: string | null
      /** Format: date-time */
      createdAt: string
      /** Format: date-time */
      updatedAt: string
      userId: number
    }
    UpdateAssistantDto: {
      /**
       * @description 助手名称
       * @example 助手1
       */
      name: string
      /**
       * @description 助手头像
       * @example https://example.com/avatar.png
       */
      avatar?: string
      /**
       * @description LLM
       * @default deepseek-r1@Tongyi-Qianwen
       * @example gpt-3.5-turbo
       */
      model_name: string
      /**
       * @description 温度
       * @default 0.1
       * @example 0.7
       */
      temperature: number
      /**
       * @description 最大生成长度
       * @default 512
       * @example 512
       */
      max_tokens: number
      /**
       * @description 核心采样
       * @default 0.3
       * @example 0.3
       */
      top_p: number
      /**
       * @description 存在惩罚
       * @default 0.4
       * @example 0.4
       */
      presence_penalty: number
      /**
       * @description 频率惩罚
       * @default 0.7
       * @example 0.7
       */
      frequency_penalty: number
      /**
       * @description 加权关键字相似度
       * @default 0.2
       * @example 0.2
       */
      similarity_threshold: number
      /**
       * @description 关键词相似度权重
       * @default 0.7
       * @example 0.7
       */
      keywords_similarity_weight: number
      /**
       * @description 生成的回复数量
       * @default 6
       * @example 6
       */
      top_n: number
      /**
       * @description 重新排序或选择前 k 个项目
       * @default 1024
       * @example 1024
       */
      top_k: number
      /**
       * @description 空响应返回内容
       * @example 无
       */
      empty_response?: string
      /**
       * @description 开场问候语
       * @example 你好，我是你的助手。
       */
      opener?: string
      /**
       * @description 提示词模板
       * @example <prompt>
       */
      prompt?: string
      id: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  AuthenticationController_signUp: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignUpDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthenticationController_signIn: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SignInDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignInEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AuthenticationController_refreshTokens: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RefreshTokenDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SignInEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  UserController_findWithPagination: {
    parameters: {
      query?: {
        /** @description 账号 */
        username?: string
        /** @description 昵称 */
        nickname?: string
        /** @description 邮箱 */
        email?: string
        /** @description 手机号 */
        phoneNumber?: string
        /** @description 性别 0: 女 1: 男 */
        sex?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['UserEntity'][]
          }
        }
      }
    }
  }
  UserController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateUserDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findAll: {
    parameters: {
      query?: {
        /** @description 账号 */
        username?: string
        /** @description 昵称 */
        nickname?: string
        /** @description 邮箱 */
        email?: string
        /** @description 手机号 */
        phoneNumber?: string
        /** @description 性别 0: 女 1: 男 */
        sex?: number
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity'][]
        }
      }
    }
  }
  UserController_findSelf: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findSelfCode: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
    }
  }
  UserController_changePassword: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ChangePasswordDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  UserController_remove: {
    parameters: {
      query?: never
      header: {
        'X-Real-IP': string
      }
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string
        }
      }
    }
  }
  UserController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UserEntity']
        }
      }
    }
  }
  DeptController_findAll: {
    parameters: {
      query?: {
        /** @description 部门名称 */
        name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity'][]
        }
      }
    }
  }
  DeptController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDeptDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DeptController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DeptController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DeptController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDeptDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeptEntity']
        }
      }
    }
  }
  DictController_findAll: {
    parameters: {
      query?: {
        /** @description 字典名称 */
        name?: string
        /** @description 字典值 */
        value?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity'][]
        }
      }
    }
  }
  DictController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDictDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  DictController_findAllData: {
    parameters: {
      query?: {
        /** @description 字典名称 */
        dictName?: string
        /** @description 字典数据名称 */
        name?: string
        /** @description 字典数据值 */
        value?: string
        /** @description 字典ID */
        dictId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity'][]
        }
      }
    }
  }
  DictController_createData: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateDictDataDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_findOneData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_removeData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DictController_updateData: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDictDataDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictDataEntity']
        }
      }
    }
  }
  DictController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  DictController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  DictController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDictDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DictEntity']
        }
      }
    }
  }
  MenuController_findAll: {
    parameters: {
      query?: {
        /** @description 菜单名称 */
        name?: string
        /** @description 菜单路径 */
        path?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity'][]
        }
      }
    }
  }
  MenuController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateMenuDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MenuController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  MenuController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  MenuController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateMenuDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MenuEntity']
        }
      }
    }
  }
  RoleController_findAll: {
    parameters: {
      query?: {
        /** @description 权限名称 */
        name?: string
        /** @description 权限值 */
        value?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['RoleEntity'][]
          }
        }
      }
    }
  }
  RoleController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoleDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  RoleController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  RoleController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  RoleController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRoleDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoleEntity']
        }
      }
    }
  }
  PostController_findAll: {
    parameters: {
      query?: {
        /** @description 岗位名称 */
        name?: string
        /** @description 岗位编码 */
        code?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['PostEntity'][]
          }
        }
      }
    }
  }
  PostController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePostDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  PostController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  PostController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  PostController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePostDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PostEntity']
        }
      }
    }
  }
  OperationLogController_findAll: {
    parameters: {
      query?: {
        username?: string
        businessType?: number
        module?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['OperationLogEntity'][]
          }
        }
      }
    }
  }
  OperationLogController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OperationLogEntity']
        }
      }
    }
  }
  LoginLogController_findAll: {
    parameters: {
      query?: {
        username?: string
        /** @description 页码 */
        current?: number
        /** @description 每页数量 */
        pageSize?: number
        /** @description 开始时间 */
        beginTime?: string
        /** @description 结束时间 */
        endTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PaginateResponse'] & {
            /** @default 0 */
            total: number
            /** @default [] */
            list: components['schemas']['LoginLogEntity'][]
          }
        }
      }
    }
  }
  LoginLogController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LoginLogEntity']
        }
      }
    }
  }
  InfoController_systemInfo: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InfoEntity']
        }
      }
    }
  }
  KnowledgeBaseController_findAll: {
    parameters: {
      query?: {
        /** @description 知识库名称 */
        name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KnowledgeBaseEntity'][]
        }
      }
    }
  }
  KnowledgeBaseController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKnowledgeBaseDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KnowledgeBaseEntity']
        }
      }
    }
  }
  KnowledgeBaseController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KnowledgeBaseEntity']
        }
      }
    }
  }
  KnowledgeBaseController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  KnowledgeBaseController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateKnowledgeBaseDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KnowledgeBaseEntity']
        }
      }
    }
  }
  KnowledgeBaseController_findAllDocument: {
    parameters: {
      query?: {
        /** @description 文档名称 */
        name?: string
      }
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DocumentEntity'][]
        }
      }
    }
  }
  KnowledgeBaseController_uploadDocument: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    /** @description 上传文件 */
    requestBody: {
      content: {
        'multipart/form-data': components['schemas']['UploadDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DocumentEntity'][]
        }
      }
    }
  }
  KnowledgeBaseController_removeDocument: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeleteDocumentDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  KnowledgeBaseController_downloadDocument: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        document_id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  KnowledgeBaseController_updateDocument: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
        document_id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateDocumentDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DocumentEntity']
        }
      }
    }
  }
  KnowledgeBaseController_parseChunks: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ParseDocumentDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
    }
  }
  KnowledgeBaseController_stopParseChunks: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ParseDocumentDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AssistantController_findAll: {
    parameters: {
      query?: {
        /** @description 助手名称 */
        name?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssistantEntity'][]
        }
      }
    }
  }
  AssistantController_create: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAssistantDto']
      }
    }
    responses: {
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AssistantController_findOne: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssistantEntity']
        }
      }
    }
  }
  AssistantController_remove: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  AssistantController_update: {
    parameters: {
      query?: never
      header?: never
      path: {
        id: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAssistantDto']
      }
    }
    responses: {
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AssistantEntity']
        }
      }
    }
  }
}
